/**
 * @file thmpost.h
 *
 * THIS FILE IS GENERATED AUTOMATICALLY, DO NOT MODIFY IT !!!
 */  
 
#ifndef thmpost_h
#define thmpost_h

/**
 * Metapost source file.
 */
 
const char * thmpost_library = 
"%% therion source code\n"
"%%\n"
"%% therion.mp\n"
"%%\n"
"%% This file defines low-level MetaPost macros and variables required\n"
"%% for generation of map symbols\n"
"%%\n"
"%% $Date: 2003/04/23 14:09:50 $\n"
"%% $RCSfile: therion.mp,v $\n"
"%% $Revision: 1.2 $\n"
"%%\n"
"%% Copyright (C) 2000-2003 Martin Budaj\n"
"%%\n"
"%% Some macros are adapted from MPATTERN package of P. Bolek\n"
"%%\n"
"%% Some macros are used from MetaFun package of H. Hagen\n"
"%%\n"
"%% -------------------------------------------------------------------- \n"
"%% This program is free software; you can redistribute it and/or modify\n"
"%% it under the terms of the GNU General Public License as published by\n"
"%% the Free Software Foundation; either version 2 of the License, or\n"
"%% any later version.\n"
"%%\n"
"%% This program is distributed in the hope that it will be useful,\n"
"%% but WITHOUT ANY WARRANTY; without even the implied warranty of\n"
"%% MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n"
"%% GNU General Public License for more details.\n"
"%% \n"
"%% You should have received a copy of the GNU General Public License\n"
"%% along with this program; if not, write to the Free Software\n"
"%% Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n"
"%% --------------------------------------------------------------------\n"
"\n"
"%    This file defines low level macros used for map signatures in Therion.\n"
"%    Before loading this file set `Scale' variable to numeric value\n"
"%    representing denominator of the scale ratio. Internal variable \n"
"%    `prologues' is set to 1 by this file. This module loads also \n"
"%    symbol libraries.\n"
"\n"
"\n"
"tracingstats:=1;\n"
"prologues:=1;\n"
"\n"
"% @VARIABLE\n"
"% symbol_scale --\n"
"%\n"
"% <I>internal numeric</I>; in map symbol definitions used for scaling\n"
"% in <A HREF=\"#T\">T</A> transformation; recommended\n"
"% values are 1 or 2.\n"
"\n"
"newinternal symbol_scale;\n"
"symbol_scale := 1;\n"
"\n"
"% @VARIABLE\n"
"% fill_only --\n"
"%\n"
"% <I>boolean</I>, used in <A HREF=\"#thdraw\">thdraw</A> and\n"
"% <A HREF=\"#thpattfill\">thpattfill</A> commands. When set to false, it has \n"
"% no effect, when it is true, it supresses all drawing \n"
"% commands with exception of <I>thpermanentfill</I>, so that only filled \n"
"% areas are drawn\n"
"\n"
"boolean fill_only, horiz_labels;\n"
"fill_only := false;\n"
"horiz_labels:=false;\n"
"\n"
"% @VARIABLE\n"
"% last_write --\n"
"%\n"
"% <I>numeric</I>; charcode of last figure which contained \n"
"% <A HREF=\"#write_bbox\">write_bbox</A> macro; this value is used by\n"
"% <A HREF=\"#close_file\">close_file</A> macro. Initially set to -1.\n"
"\n"
"numeric last_write;\n"
"last_write = -1;\n"
"\n"
"% @VARIABLE\n"
"% strut_string --\n"
"%\n"
"% <I>string</I> containing combination of the \"highest\" and \"lowest\" character\n"
"% in used font; it's used by <A HREF=\"\">free_text</A> macro.\n"
"\n"
"string strut_string;\n"
"strut_string = \"(È\";\n"
"\n"
"% @VARIABLE\n"
"% file_name --\n"
"%\n"
"% <I>string</I>, name of file, where <I>write_bbox</I> macro writes\n"
"% text clipping path\n"
"\n"
"% @VARIABLE\n"
"% s ch --\n"
"%\n"
"% <I>string</I>, temporary string/char variables\n"
"\n"
"string s, ch, file_name, bg_name, clip_name, lang, diff_pos, diff_neg;\n"
"\n"
"% @VARIABLE\n"
"% u v w --\n"
"%\n"
"% <I>internal numeric variables</I> used as basic length units for drawing;\n"
"% they are set by <A HREF=\"#initialize\">initialize</A> macro.\n"
"% <UL> <LI><I>u</I> -- normal unit decreasing with increasing scale\n"
"%      <LI><I>v</I> -- like <I>u</I>, but can increase drammaticaly\n"
"%            when some limit is encountered (to get effects like logarithmic\n"
"%            scale)\n"
"%      <LI><I>w</I> -- nearly constant at all scales\n"
"% </UL>\n"
"\n"
"% @VARIABLE\n"
"% legend_scale --\n"
"%\n"
"% <I>numeric</I>, length of the longer side of signatures' legend box\n"
"\n"
"newinternal legend_scale, u,v,w;\n"
"\n"
"% @VARIABLE\n"
"% lab Lab --\n"
"%\n"
"% <I>picture</I>, in which are saved typeset labels\n"
"\n"
"picture lab, Lab;\n"
"\n"
"% @VARIABLE\n"
"% T --\n"
"%\n"
"% <I>transformation</I>, defines transformation function for transforming \n"
"% every argument of <A HREF=\"#thdraw>thdraw</A> and <A HREF=\"#thfill>thfill</A>\n"
"% macros\n"
"\n"
"transform T;\n"
"\n"
"% @VARIABLE\n"
"% p,q --\n"
"%\n"
"% <I>path</I>, for saving temporary paths\n"
"\n"
"path p,q;\n"
"\n"
"% @MACRO\n"
"% initialize --\n"
"%\n"
"% initializes basic length units <A HREF=\"#u\">(u,v,w)</A> and pens used \n"
"% in map symbols according to scale. Five circular pens are defined:\n"
"% <UL><LI>PenA -- thick; for outlines\n"
"%    <LI>PenB, PenC -- thinner; for pits, symbols etc.\n"
"%    <LI>PenD -- thinnest; for fine details\n"
"%    <LI>PenX -- extra thick; not recommended for use\n"
"% </UL>\n"
"\n"
"def initialize (expr Scale) =\n"
"    if Scale <= 100:\n"
"        u:=14bp; v:=14bp; w:=12bp;\n"
"    elseif Scale <= 200:\n"
"        u:=12bp; v:=12bp; w:=12bp;\n"
"    elseif Scale <= 500:\n"
"        u:=10bp; v:=10bp; w:=12bp;\n"
"    else:\n"
"        u:=7bp; v:=14bp; w:=10bp;\n"
"    fi;\n"
"    \n"
"    def PenA = pencircle scaled (u/10) enddef;\n"
"    def PenB = pencircle scaled (0.7*u/10) enddef;\n"
"    def PenC = pencircle scaled (0.5*u/10) enddef;\n"
"    def PenD = pencircle scaled (0.35*u/10) enddef;\n"
"    def PenX = pencircle scaled (1.2*u/10) enddef;\n"
"    \n"
"    legend_scale := 3.14*u;\n"
"enddef;\n"
"\n"
"% macro is expanded, we have to know all dimensions and pens before reading\n"
"% mpattern macros\n"
"\n"
"initialize(Scale);\n"
"\n"
"% @MACRO\n"
"% inscale --\n"
"%\n"
"% zooms objects to scale specified in legend_scale variable (used in legend\n"
"% typesetting)\n"
"\n"
"def inscale = \n"
"    xscaled legend_scale yscaled (0.618*legend_scale)\n"
"enddef;\n"
"\n"
"% @MACRO\n"
"% draw_legend_box --\n"
"%\n"
"% draws a legend bounding box and resets drawoptions() options \n"
"\n"
"def draw_legend_box =\n"
"    clip currentpicture to unitsquare inscale;\n"
"    drawoptions();\n"
"    pickup PenB;\n"
"    draw unitsquare inscale;\n"
"enddef;\n"
"\n"
"def legend_point (expr name) =\n"
"  scantokens(name)((0.5,0.5) inscale,0,1);\n"
"  draw_legend_box;\n"
"enddef;\n"
"\n"
"def legend_line (expr name) =\n"
"  scantokens(name)((((-0.3,.5)..(.3,.7)..(.5,.3)..{dir 80}(1.3,.9)) inscale) \n"
"                randomized 3mm);\n"
"  draw_legend_box;\n"
"enddef;\n"
"\n"
"% legend_label\n"
"% legend_area\n"
"% legend_random\n"
"\n"
"% @MACRO\n"
"% roundone --\n"
"%\n"
"% rounds <I>numeric value</I> to one decimal point\n"
"\n"
"def roundone(expr n) =\n"
"    round(10*n)/10\n"
"enddef;\n"
"\n"
"% @MACRO\n"
"% process_label --\n"
"%\n"
"% draws a label saved in <I>lab</I> picture variable and calls \n"
"% <A HREF=\"#write_bbox\">write_bbox</A> macro.\n"
"\n"
"\n"
"def process_label (expr cent, rot) =\n"
"  begingroup\n"
"    bboxmargin:=0.8bp;\n"
"    q:=((bbox lab) smoothed 2) rotatedaround (cent, rot);\n"
"    draw lab rotatedaround (cent, rot);\n"
"    write_circ_bbox(q);  % without corners smoothing it was enough to use\n"
"                         % write_bbox(q);\n"
"  endgroup;\n"
"enddef;\n"
"\n"
"% @MACRO\n"
"% process_uplabel --\n"
"%\n"
"% draws a label into semicircular box and writes clipping path to a file\n"
"\n"
"def process_uplabel =\n"
"    q:=bbox lab;\n"
"    alef:=.8-.02*(xpart lrcorner q - xpart llcorner q);\n"
"%    show alef;\n"
"    q:=alef[llcorner q,ulcorner q]{up} .. {down}alef[lrcorner q, urcorner q] --\n"
"        lrcorner q -- llcorner q -- cycle;\n"
"    draw lab;\n"
"    draw q;\n"
"    q:=reverse q;\n"
"    write_circ_bbox(q);\n"
"enddef;\n"
"\n"
"% @MACRO\n"
"% process_downlabel --\n"
"%\n"
"% draws a label into down oriented semicircular box and writes\n"
"% clipping path to a file\n"
"\n"
"def process_downlabel =\n"
"    q:=bbox lab;\n"
"    alef:=1-(.8-.02*(xpart lrcorner q - xpart llcorner q));\n"
"    q:=alef[llcorner q,ulcorner q]{down} .. \n"
"        {up}alef[lrcorner q, urcorner q] --\n"
"        urcorner q -- ulcorner q -- cycle;\n"
"    draw lab;\n"
"    draw q;\n"
"    write_circ_bbox(q);\n"
"enddef;\n"
"\n"
"% @MACRO\n"
"% process_updownlabel --\n"
"%\n"
"% draws a label splitted into down and up oriented semicircular boxes and \n"
"% writes clipping path to a file\n"
"\n"
"def process_updownlabel =\n"
"    p:=bbox lab;\n"
"    q:=bbox Lab;\n"
"    leftside:=min(xpart llcorner p, xpart ulcorner q);\n"
"    rightside:=max(xpart lrcorner p, xpart urcorner q);\n"
"    draw .5[(leftside, ypart llcorner p),(leftside, ypart ulcorner q)] -- \n"
"         .5[(rightside,ypart lrcorner p),(rightside,ypart urcorner q)];\n"
"    alef:=.8-.02*(rightside-leftside);\n"
"    q:=alef[(leftside, ypart llcorner p),(leftside, ypart ulcorner p)]{up} .. \n"
"       {down}alef[(rightside, ypart lrcorner p), (rightside, ypart urcorner p)]\n"
"        -- alef[(rightside, ypart urcorner q), (rightside, ypart lrcorner q)]{down}\n"
"        .. {up}alef[(leftside, ypart ulcorner q),(leftside, ypart llcorner q)]\n"
"        -- cycle;\n"
"    draw lab;\n"
"    draw Lab;\n"
"    draw q;\n"
"    q:=reverse q;\n"
"    write_circ_bbox(q);\n"
"enddef;\n"
"\n"
"% @MACRO\n"
"% process_boxedlabel --\n"
"%\n"
"% draws a label into circular box and writes\n"
"% clipping path to a file\n"
"\n"
"def process_boxedlabel =\n"
"    q:=bbox lab;\n"
"    draw lab;\n"
"    draw q;\n"
"    write_bbox(q);\n"
"enddef;\n"
"\n"
"% @MACRO\n"
"% process_circledlabel --\n"
"%\n"
"% draws a label into circular box and writes\n"
"% clipping path to a file\n"
"\n"
"def process_circledlabel =\n"
"    q:=bbox lab;\n"
"    q:=point 0 of q .. point 1 of q .. point 2 of q .. point 3 of q .. cycle;\n"
"    draw lab;\n"
"    draw q;\n"
"    write_circ_bbox(q);\n"
"enddef;\n"
"\n"
"\n"
"% @MACRO\n"
"% write_bbox --\n"
"%\n"
"% Arguments:\n"
"%   <I>path</I> variable -- rectangular bounding box of a label;\n"
"%   assumptions: path is cyclic, counterclockwise oriented, with four points,\n"
"%   composed from linear segments;\n"
"%   see general <A HREF=\"#write_circ_bbox\">write_circ_bbox</A> macro\n"
"% Results:\n"
"%   one file per figure which uses labels with a clipping path in pseudo-pdf \n"
"%   format\n"
"\n"
"def write_bbox (expr q) =\n"
"    file_name := jobname & \".\" & decimal(charcode) & \"bbox\";\n"
"    for i:=4 downto 0:\n"
"        s  :=  decimal(roundone(xpart point i of q)) & \" \" \n"
"             & decimal(roundone(ypart point i of q)) \n"
"             & if i=4: \" m \" else: \" l\" fi;\n"
"        write s to file_name;\n"
"    endfor;\n"
"    last_write := charcode;\n"
"enddef;\n"
"\n"
"% @MACRO\n"
"% write_circ_bbox --\n"
"%\n"
"% Arguments:\n"
"%   <I>path</I> variable, only assumption is that <I>path</I> is cyclic\n"
"%   and counterclockwise oriented.\n"
"% Results:\n"
"%   one file per figure which uses labels with a clipping path in pseudo-pdf \n"
"%   format\n"
"\n"
"def write_circ_bbox expr q =\n"
"    file_name := jobname & \".\" & decimal(charcode) & \"bbox\";\n"
"    tmp:=length q;\n"
"    s :=  decimal(roundone(xpart point tmp of q)) & \" \" \n"
"             & decimal(roundone(ypart point tmp of q)) & \" m\";\n"
"    write s to file_name;\n"
"    for i:=tmp downto 1:\n"
"        s :=  decimal(roundone(xpart precontrol i of q)) & \" \" \n"
"             & decimal(roundone(ypart precontrol i of q)) & \" \"\n"
"             & decimal(roundone(xpart postcontrol i-1 of q)) & \" \" \n"
"             & decimal(roundone(ypart postcontrol i-1 of q)) & \" \"\n"
"             & decimal(roundone(xpart point i-1 of q)) & \" \" \n"
"             & decimal(roundone(ypart point i-1 of q)) & \" c\";\n"
"        write s to file_name;\n"
"    endfor;\n"
"    last_write := charcode;\n"
"enddef;\n"
"\n"
"% @MACRO\n"
"% close_file --\n"
"%\n"
"% closes file with a clipping path; it's invoked by <I>endchar</I> macro\n"
"\n"
"def close_file =\n"
"    if last_write=charcode:\n"
"        write EOF to jobname & \".\" & decimal(charcode) & \"bbox\";\n"
"    fi;\n"
"enddef;\n"
"\n"
"% endchar should run close_file macro\n"
"\n"
"extra_endfig := \"close_file;\";\n"
"\n"
"% @MACRO\n"
"% thdraw --\n"
"%\n"
"% like plain MetaPost's <I>draw</I>, but draws a <I>path</I> transformed\n"
"% (rotated, scaled, shifted) to scrap's coordinates according T variable.\n"
"% (If <I>fill_only=false</I>)\n"
"\n"
"def thdraw expr p = \n"
"  if not fill_only:\n"
"    addto currentpicture doublepath (p transformed T) withpen currentpen _op_\n"
"  else:\n"
"    addto currentpicture also nullpicture\n"
"  fi\n"
"enddef;\n"
"\n"
"% @MACRO\n"
"% thfill --\n"
"%\n"
"% fills a <I>path</I> transformed\n"
"% (rotated, scaled, shifted) to scrap's coordinates according T variable.\n"
"% Filled areas are clipped (like most \n"
"% other lines and points) with a clipping path around text labels.\n"
"\n"
"\n"
"def thfill expr c = \n"
"    addto currentpicture contour (c transformed T) _op_ \n"
"enddef;\n"
"\n"
"def thfilldraw expr c =\n"
"  if not fill_only:\n"
"    addto currentpicture contour (c transformed T) withpen currentpen _op_ \n"
"  else:\n"
"    addto currentpicture contour (c transformed T) _op_ \n"
"  fi\n"
"enddef;\n"
"\n"
"def thunfill expr c = \n"
"    thfill c withcolor background \n"
"enddef;\n"
"\n"
"def thundraw expr p = \n"
"    thdraw p withcolor background \n"
"enddef;\n"
"\n"
"def thunfilldraw expr c = \n"
"    thfilldraw c withcolor background \n"
"enddef;\n"
"\n"
"def thclean expr c =\n"
"  thfill c withtransparentcolor tr_white\n"
"enddef;\n"
"\n"
"% for drawarrow:\n"
"\n"
"def _finarr text t =\n"
"  thdraw _apth t;\n"
"  thfilldraw arrowhead _apth  t\n"
"enddef;\n"
"\n"
"% @MACRO\n"
"% thpermanentfill --\n"
"%\n"
"% Fills specified area with a solid color; this area is not affected by \n"
"% text clipping path\n"
"\n"
"%def thpermanentfill expr c = \n"
"%    addto currentpicture contour (c transformed T) _op_\n"
"%enddef;\n"
"\n"
"let thpermanentfill = thfill;\n"
"\n"
"\n"
"primarydef p aligned al=\n"
"  p shifted (xpart al * xpart U, ypart al * ypart U)\n"
"enddef;\n"
"\n"
"% macros for drawing scraps in upper and lower levels; filled lower scraps \n"
"% require special treatment (MetaPost doesn't support non-continuous paths).\n"
"% We can't use one file for both, while PDF XObject has to be explicitely \n"
"% filled or stroked. Second macro writes also pseudo-pdf code of a clipping \n"
"% path for given scrap\n"
"\n"
"boolean drawnext;\n"
"drawnext:=true;\n"
"\n"
"def draw_upscrap (expr isout)(text t) =\n"
"  path q;\n"
"  for i=t:\n"
"    if (numeric i):\n"
"      if (i=1): drawnext:=true; else: drawnext:=false; fi;\n"
"    else:\n"
"      if drawnext: draw i withpen PenD; fi;\n"
"      if not known q: q:=i; else: q:=q -- i; fi;\n"
"    fi;\n"
"  endfor;\n"
"  if not cycle q: q:=q -- cycle; fi;\n"
"  if isout=1:\n"
"    if turningnumber q > 0: q := reverse q; fi;\n"
"  else:\n"
"    if turningnumber q <= 0: q := reverse q; fi;\n"
"  fi;\n"
"  addto bgfill contour q;\n"
"enddef;\n"
"\n"
"% following macro writes noncontinuous PostScript path directly to EPS file\n"
"% (filled background and clipping path)\n"
"\n"
"picture bgfill;\n"
"bgfill:=nullpicture;\n"
"\n"
"def draw_downscrap =\n"
"  bg_name := jobname & \".\" & decimal(charcode) & \"bg\";\n"
"  clip_name := jobname & \".\" & decimal(charcode) & \"clip\";\n"
"  write \"%!PS\" to bg_name;\n"
"  write \"%%BoundingBox: \" & \n"
"     decimal round xpart llcorner bgfill & \" \" &\n"
"     decimal round ypart llcorner bgfill & \" \" &\n"
"     decimal round xpart urcorner bgfill & \" \" &\n"
"     decimal round ypart urcorner bgfill \n"
"     to bg_name;\n"
"  write \"%%Page: 1 1\" to bg_name;\n"
"  for qq within bgfill:\n"
"    q := pathpart qq;\n"
"    tmp:=length q;\n"
"    s := decimal(roundone(xpart point tmp of q)) & \" \" \n"
"             & decimal(roundone(ypart point tmp of q)) & \" m\";\n"
"    write s & \"oveto\" to bg_name;\n"
"    write s to clip_name;\n"
"    for i:=tmp downto 1:\n"
"        s :=  decimal(roundone(xpart precontrol i of q)) & \" \" \n"
"             & decimal(roundone(ypart precontrol i of q)) & \" \"\n"
"             & decimal(roundone(xpart postcontrol i-1 of q)) & \" \" \n"
"             & decimal(roundone(ypart postcontrol i-1 of q)) & \" \"\n"
"             & decimal(roundone(xpart point i-1 of q)) & \" \" \n"
"             & decimal(roundone(ypart point i-1 of q)) & \" c\";\n"
"        write s & \"urveto\" to bg_name;\n"
"        write s to clip_name;\n"
"    endfor;\n"
"  endfor;\n"
"  write \"closepath fill\" to bg_name;\n"
"  write \"showpage\" to bg_name;\n"
"  write \"%%EOF\" to bg_name;\n"
"  write EOF to bg_name;\n"
"  write EOF to clip_name;\n"
"  bgfill:=nullpicture;\n"
"enddef;\n"
"\n"
"%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n"
"% P. Bolek's MPATTERN package adapted and simplified for Therion\n"
"% (with the same user interface except of patterncolor)\n"
"%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n"
"\n"
"string Pname_, PXYsteps_;\n"
"string Pmatrix_;\n"
"\n"
"numeric Pnum_; Pnum_=0;\n"
"\n"
"def PmakeBB_=\n"
"   PBBox_ := \"[\" & decimal Plft_ & \" \" & decimal Plow_ & \" \"\n"
"   & decimal Prt_ & \" \" & decimal Pup_ & \"]\";\n"
"enddef;\n"
"\n"
"def Psteps_=\n"
"   PXYsteps_ := decimal\n"
"     if unknown PXStep_: (Prt_-Plft_) else: PXStep_ fi \n"
"   & \":\" & decimal\n"
"     if unknown PYStep_: (Pup_-Plow_) else: PYStep_ fi;\n"
"enddef;\n"
"   \n"
"vardef Pfindbounds_=\n"
"   Plow_ = ypart (llcorner currentpicture);\n"
"   Plft_ = xpart (llcorner currentpicture);\n"
"   Pup_ = ypart (urcorner currentpicture);\n"
"   Prt_ = xpart (urcorner currentpicture);\n"
"   PmakeBB_;\n"
"enddef;\n"
"\n"
"def PmakePattern_(expr name)=\n"
"  write decimal (Pnum_*epsilon) & \":\"\n"
"    & jobname & \".\" & decimal charcode & \":\"\n"
"    & PBBox_ & \":\"\n"
"    & PXYsteps_ & \":\"\n"
"    & Pmatrix_ \n"
"  to \"patterns.dat\"\n"
"enddef;\n"
"\n"
"% User interface macros\n"
"\n"
"vardef patternbbox(expr a)(text b)=\n"
"   save Pi_, Pz_;\n"
"   numeric Pi_, Pz_[];\n"
"   if pair a:\n"
"      Plft_:=min(xpart(a),xpart(b)); Plow_:=min(ypart(a),ypart(b));\n"
"      Prt_:=max(xpart(a),xpart(b));  Pup_:=max(ypart(a),ypart(b));\n"
"   else:\n"
"      Pi_=1;\n"
"      for t=b:\n"
"\t Pz_[Pi_]=t;\n"
"\t Pi_:=Pi_+1;\n"
"      endfor;\n"
"      Plft_:=min(a,Pz_2);   Plow_:=min(Pz_1,Pz_3);\n"
"      Prt_:=max(a,Pz_2); Pup_:=max(Pz_1,Pz_3);\n"
"   fi;\n"
"   PmakeBB_;\n"
"enddef;\n"
"\n"
"def beginpattern(suffix name)=\n"
"  numeric PXStep_, PYStep_;\n"
"  numeric Plow_, Plft_, Pup_, Prt_;\n"
"  string PBBox_;\n"
"  Pmatrix_:=\"[1 0 0 1 0 0]\";\n"
"  Pname_:=str name;\n"
"  Pnum_:=Pnum_+1;\n"
"  beginfig(Pnum_+4000);\n"
"enddef;\n"
"\n"
"def endpattern=\n"
"  if unknown PBBox_:\n"
"     Pfindbounds_;\n"
"  fi;\n"
"  endfig;\n"
"  Psteps_;\n"
"  PmakePattern_(Pname_);\n"
"  scantokens(Pname_ & \"=Pnum_;\");\n"
"enddef;\n"
"\n"
"primarydef p withpattern s=\n"
"   p withcolor (epsilon, 10*epsilon, s*epsilon);\n"
"enddef;\n"
"   \n"
"def patterntransform expr t=\n"
"   Pmatrix_ := \"[\" & decimal xxpart t\n"
"              & \" \" & decimal yxpart t\n"
"              & \" \" & decimal xypart t\n"
"              & \" \" & decimal yypart t\n"
"              & \" \" & decimal xpart t\n"
"              & \" \" & decimal ypart t & \"]\";\n"
"enddef;\n"
"\n"
"def patternxstep expr t=\n"
"   PXStep_ = t;\n"
"enddef;\n"
"\n"
"def patternystep expr t=\n"
"   PYStep_ = t;\n"
"enddef;\n"
"\n"
"def patternstep text t=\n"
"   if pair t:\n"
"      PXStep_ = xpart t;\n"
"      PYStep_ = ypart t;\n"
"   else:\n"
"      (PXStep_,PYStep_)=t;\n"
"   fi;\n"
"enddef;\n"
"\n"
"def patterncolor expr t=\n"
"  message(\"Warning: patterncolor not supported in Therion\");\n"
"enddef;\n"
"\n"
"%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n"
"% end of pattern macros\n"
"%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n"
"\n"
"% transparent rgb colors\n"
"\n"
"numeric RGBnum; RGBnum=0;\n"
"string RGBname;\n"
"\n"
"def def_transparent_rgb (suffix name)(expr r, g, b) =\n"
"  RGBnum := RGBnum+1;\n"
"  RGBname := str name;\n"
"  write decimal (RGBnum*epsilon) & \":\"\n"
"    & decimal r & \" \"\n"
"    & decimal g & \" \"\n"
"    & decimal b \n"
"  to \"rgbcolors.dat\";\n"
"  scantokens(RGBname & \"=RGBnum;\");\n"
"enddef;\n"
"\n"
"primarydef p withtransparentcolor s=\n"
"   p withcolor (epsilon, 12*epsilon, s*epsilon);\n"
"enddef;\n"
"\n"
"%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n"
"% some useful macros from H. Hagen's MetaFun package\n"
"%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n"
"\n"
"vardef paired (expr d) =\n"
"  if pair d : d else : (d,d) fi\n"
"enddef ;\n"
"\n"
"primarydef p randomshifted s = \n"
"  begingroup ; save ss ; pair ss ; ss := paired(s) ; \n"
"  p shifted (-.5xpart ss + uniformdeviate xpart ss,\n"
"             -.5ypart ss + uniformdeviate ypart ss) \n"
"  endgroup \n"
"enddef ; \n"
"\n"
"primarydef p randomized s =\n"
"  (if path p : \n"
"    for i=0 upto length(p)-1 :\n"
"      ((point       i    of p) randomshifted s) .. controls \n"
"      ((postcontrol i    of p) randomshifted s) and \n"
"      ((precontrol (i+1) of p) randomshifted s) .. \n"
"    endfor \n"
"    if cycle p : \n"
"      cycle \n"
"    else :\n"
"      ((point length(p) of p) randomshifted s) \n"
"    fi\n"
"  elseif pair p :\n"
"    p randomshifted s  \n"
"  elseif color p :\n"
"    if color s : \n"
"      (uniformdeviate redpart   s * redpart   p,\n"
"       uniformdeviate greenpart s * greenpart p,\n"
"       uniformdeviate bluepart  s * bluepart  p)  \n"
"    elseif pair s : \n"
"      ((xpart s + uniformdeviate (ypart s - xpart s)) * p)  \n"
"    else :  \n"
"      (uniformdeviate s * p)  \n"
"    fi \n"
"  else :\n"
"    p + uniformdeviate s  \n"
"  fi)  \n"
"enddef ; \n"
"\n"
"primarydef p llmoved d =\n"
"  ((llcorner p) shifted (-xpart paired(d),-ypart paired(d)))\n"
"enddef ;\n"
"\n"
"primarydef p lrmoved d =\n"
"  ((lrcorner p) shifted (+xpart paired(d),-ypart paired(d)))\n"
"enddef ;\n"
"\n"
"primarydef p urmoved d =\n"
"  ((urcorner p) shifted (+xpart paired(d),+ypart paired(d)))\n"
"enddef ;\n"
"\n"
"primarydef p ulmoved d =\n"
"  ((ulcorner p) shifted (-xpart paired(d),+ypart paired(d)))\n"
"enddef ;\n"
"\n"
"primarydef p smoothed d =\n"
"  (p llmoved (-xpart paired(d),0) -- p lrmoved (-xpart paired(d),0) {right} .. \n"
"   p lrmoved (0,-ypart paired(d)) -- p urmoved (0,-ypart paired(d)) {up}    .. \n"
"   p urmoved (-xpart paired(d),0) -- p ulmoved (-xpart paired(d),0) {left}  ..\n"
"   p ulmoved (0,-ypart paired(d)) -- p llmoved (0,-ypart paired(d)) {down}  .. cycle) \n"
"enddef ;\n"
"\n"
"%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n"
"% end of MetaFun macros\n"
"%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n"
"\n"
"% we input map symbol definitions\n"
"\n"
"\n\n\n%%%%% INPUT thPoint %%%%%\n\n\n"
"%% therion source code\n"
"%%\n"
"%% thPoint -- therion project file of type metapost symbol library\n"
"%%\n"
"%% This file defines macros for point map signatures\n"
"%%\n"
"%% $Date: 2002/07/30 15:10:22 $\n"
"%% $RCSfile: thPoint.mp,v $\n"
"%% $Revision: 1.5 $\n"
"%%\n"
"%% Copyright (C) 2000 Martin Budaj\n"
"%%\n"
"%% -------------------------------------------------------------------- \n"
"%% This program is free software; you can redistribute it and/or modify\n"
"%% it under the terms of the GNU General Public License as published by\n"
"%% the Free Software Foundation; either version 2 of the License, or\n"
"%% any later version.\n"
"%%\n"
"%% This program is distributed in the hope that it will be useful,\n"
"%% but WITHOUT ANY WARRANTY; without even the implied warranty of\n"
"%% MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n"
"%% GNU General Public License for more details.\n"
"%% \n"
"%% You should have received a copy of the GNU General Public License\n"
"%% along with this program; if not, write to the Free Software\n"
"%% Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n"
"%% --------------------------------------------------------------------\n"
"\n"
"% @LIBRARY\n"
"% thPoint --\n"
"%\n"
"% All point symbols are drawn in own relative coordinates. Recommended\n"
"% ranges are <-.5u,.5u> in both axes. For drawing and filling\n"
"% use <I>thdraw</I> and <I>thfill</I>\n"
"% commands instead of MetaPost's <I>draw</I> and <I>fill</I> equivalents.\n"
"% These commands draw paths transformed as specified in <I>T</I> variable.\n"
"% (Before drawing is necessary to set this variable according actual parameters\n"
"% <I>theta</I> for rotation, <I>pos</I> for shift and \n"
"% <I>sc</I> for scaling.\n"
"% If you need other drawing commands (like <I>drawdot</I>), it's \n"
"% necessary to define them (take definition of <I>thdraw</I> as an example). \n"
"\n"
"\n"
"% @DESCRIPTION\n"
"% \n"
"% <H3>Symbols</H3> argument to point symbol signatures is position, rotation\n"
"% and scale.\n"
"% <BR><H4>Speleothems:</H4>\n"
"\n"
"% @SYMBOL\n"
"% thStalactite_UIS --\n"
"%\n"
"% @PREVIEW\n"
"%\n"
"% thStalactite_UIS((.5,.5) inscale,0,1);\n"
"\n"
"pair U;\n"
"\n"
"def thStalactite_UIS(expr pos,theta,sc,al) =\n"
"    U:=(.15u, .4u);\n"
"    T:=identity aligned al rotated theta scaled sc shifted pos;\n"
"    pickup PenC;\n"
"    thdraw (0,-.4u) -- (0,.15u) -- (-.15u,.4u);\n"
"    thdraw (0,.15u) -- (.15u,.4u);\n"
"enddef;\n"
"\n"
"% @SYMBOL\n"
"% thStalagmite_UIS --\n"
"%\n"
"% @PREVIEW\n"
"%\n"
"% thStalagmite_UIS((.5,.5) inscale,0,1);\n"
"\n"
"def thStalagmite_UIS(expr pos,theta,sc,al) =\n"
"    U:=(.15u,.4u);\n"
"    T:=identity aligned al rotated theta scaled sc shifted pos;\n"
"    pickup PenC;\n"
"    thdraw (0,.4u) -- (0,-.15u) -- (-.15u,-.4u);\n"
"    thdraw (0,-.15u) -- (.15u,-.4u);\n"
"enddef;\n"
"\n"
"% @SYMBOL\n"
"% thPillar_UIS --\n"
"%\n"
"% @PREVIEW\n"
"%\n"
"% thPillar_UIS((.5,.5) inscale,0,1);\n"
"\n"
"def thPillar_UIS(expr pos,theta,sc,al) =\n"
"    U:=(.15u,.4u);\n"
"    T:=identity aligned al rotated theta scaled sc shifted pos;\n"
"    pickup PenC;\n"
"    thdraw (0,.15u)--(0,-.15u);\n"
"    thdraw (-.15u,-.4u)--(0,-.15u)--(.15u,-.4u);\n"
"    thdraw (-.15u,.4u)--(0,.15u)--(.15u,.4u);\n"
"enddef;\n"
"\n"
"% @SYMBOL\n"
"% thCurtain_UIS --\n"
"%\n"
"% @PREVIEW\n"
"%\n"
"% thCurtain_UIS((.5,.5) inscale,0,1);\n"
"\n"
"def thCurtain_UIS(expr pos,theta,sc,al) =\n"
"    U:=(.15u,.4u);\n"
"    T:=identity aligned al rotated theta scaled sc shifted pos;\n"
"    pickup PenC;\n"
"    thdraw (-.15u,.4u)--(0,.15u)--(.15u,.4u);\n"
"    thdraw (0,.15u)--(0,0){dir 180}..(-.12u,-.11u)..{dir 0}(0,-.22u)--(0,-.4u);\n"
"enddef;\n"
"\n"
"% @SYMBOL\n"
"% thHelectite_UIS --\n"
"%\n"
"% @PREVIEW\n"
"%\n"
"% thHelectite_UIS((.5,.5) inscale,0,1);\n"
"\n"
"def thHelectite_UIS(expr pos,theta,sc,al) =\n"
"    U:=(.2u,.4u);\n"
"    T:=identity aligned al rotated theta scaled sc shifted pos;\n"
"    pickup PenC;\n"
"    thdraw (0,.4u)--(0,-.4u);\n"
"    p := (-.2u,.4u)---(-.2u,.1u){down}..{dir -10}(-.1u,0.02u)---origin;\n"
"    thdraw p;\n"
"    thdraw p reflectedabout (origin,(0,u)) reflectedabout (origin,(u,0));\n"
"enddef;\n"
"\n"
"% @SYMBOL\n"
"% thSodaStraw_UIS --\n"
"%\n"
"% @PREVIEW\n"
"%\n"
"% thSodaStraw_UIS((.5,.5) inscale,0,1);\n"
"\n"
"def thSodaStraw_UIS(expr pos,theta,sc,al) =\n"
"    U:=(.5u,.25u);\n"
"    T:=identity aligned al rotated theta scaled sc shifted pos;\n"
"    pickup PenC;\n"
"    thdraw (-.5u,.2u)--(.5u,.2u);\n"
"    pickup PenD;\n"
"    thdraw (-.4u,.2u)--(-.4u,0);\n"
"    thdraw (-.12u,.2u)--(-.12u,-.25u);\n"
"    thdraw (.02u,.2u)--(.02u,-.1u);\n"
"    thdraw (.23u,.2u)--(.23u,-.19u);\n"
"    thdraw (.35u,.2u)--(.35u,-.15u);\n"
"enddef;\n"
"\n"
"\n"
"\n"
"% @SYMBOL\n"
"% thCrystal_UIS --\n"
"%\n"
"% @PREVIEW\n"
"%\n"
"% thCrystal_UIS((.5,.5) inscale,0,1);\n"
"\n"
"def thCrystal_UIS (expr pos,theta,sc,al)=\n"
"    U:=(.35u,.35u);\n"
"    T:=identity aligned al rotated theta scaled sc shifted pos;\n"
"    pickup PenC;\n"
"    p := ((-.35*u,0)--(.35*u,0));\n"
"    thdraw p;\n"
"    thdraw p rotated (60);\n"
"    thdraw p rotated (120);\n"
"enddef;\n"
"\n"
"% @SYMBOL\n"
"% thFlowstoneSymbol_UIS --\n"
"%\n"
"% Can be used for <I>Clay</I> symbol (like in CCNP)\n"
"%\n"
"% @PREVIEW\n"
"%\n"
"% thFlowstoneSymbol_UIS((.5,.5) inscale,0,1);\n"
"\n"
"def thFlowstoneSymbol_UIS (expr pos,theta,sc,al)=\n"
"    U:=(.45u,.1u);\n"
"    T:=identity aligned al rotated theta scaled sc shifted pos;\n"
"    pickup PenC;\n"
"    p := ((-.15*u,0)--(.15*u,0));\n"
"    thdraw p shifted (.3u,-.1u);\n"
"    thdraw p shifted (-.3u,-.1u);\n"
"    thdraw p shifted (0,.1u);\n"
"enddef;\n"
"\n"
"% @SYMBOL\n"
"% thMoonmilkSymbol_UIS --\n"
"%\n"
"% @PREVIEW\n"
"%\n"
"% thMoonmilkSymbol_UIS((.5,.5) inscale,0,1);\n"
"\n"
"def thMoonmilkSymbol_UIS (expr pos,theta,sc,al)=\n"
"    U:=(.5u,.2u);\n"
"    T:=identity aligned al rotated theta scaled sc shifted pos;\n"
"    pickup PenC;\n"
"    thdraw (-.5u,-.2u){up}..{dir -60}(-.18u,-.105u){dir 80}..\n"
"        {dir-80}(.18u,-.105u){dir 60}..{down}(.5u,-.2u);\n"
"enddef;\n"
"\n"
"% @SYMBOL\n"
"% thWallcalciteSymbol_UIS --\n"
"%\n"
"% @PREVIEW\n"
"%\n"
"% thWallcalciteSymbol_UIS((.5,.5) inscale,0,1);\n"
"\n"
"def thWallcalciteSymbol_UIS (expr pos,theta,sc,al)=\n"
"    U:=(.2u,.2u);\n"
"    T:=identity aligned al rotated theta scaled sc shifted pos;\n"
"    pickup PenC;\n"
"    thdraw (-.2u,-.2u)--(0,.1u)--(.2u,-.2u);\n"
"enddef;\n"
"\n"
"% @SYMBOL\n"
"% thPopcorn_UIS --\n"
"%\n"
"% Changed name from <I>Cauliflowercalcite</I> according to CCNP rules\n"
"%\n"
"% @PREVIEW\n"
"%\n"
"% thPopcorn_UIS((.5,.5) inscale,0,1);\n"
"\n"
"def thPopcorn_UIS (expr pos,theta,sc,al)=\n"
"    U:=(.5u,.2u);\n"
"    T:=identity aligned al rotated theta scaled sc shifted pos;\n"
"    pickup PenC;\n"
"    thdraw (-.5u,-.2u)--(.5u,-.2u);\n"
"    pickup PenD;\n"
"    thdraw (-.3u,-.2u)--(-.3u,.1u);\n"
"    thdraw (0,-.2u)--(0,.1u);\n"
"    thdraw (.3u,-.2u)--(.3u,.1u);\n"
"    thfill fullcircle scaled .2u shifted (-.3u,.1u);\n"
"    thfill fullcircle scaled .2u shifted (0,.1u);\n"
"    thfill fullcircle scaled .2u shifted (.3u,.1u);\n"
"enddef;\n"
"\n"
"% @SYMBOL\n"
"% thDisk_UIS --\n"
"%\n"
"% @PREVIEW\n"
"%\n"
"% thDisk_UIS((.5,.5) inscale,0,1);\n"
"\n"
"def thDisk_UIS (expr pos,theta,sc,al)=\n"
"    U:=(.2u,.3u);\n"
"    T:=identity aligned al rotated theta scaled sc shifted pos;\n"
"    pickup PenC;\n"
"    thdraw (-.2u,-.3u)--origin--(.2u,-.3u);\n"
"    p:=fullcircle scaled .3u shifted (0,.15u);\n"
"    thclean p;\n"
"    thdraw p;\n"
"enddef;\n"
"\n"
"% @SYMBOL\n"
"% thGypsum_CCNP --\n"
"%\n"
"% @PREVIEW\n"
"%\n"
"% thGypsum_CCNP((.5,.5) inscale,0,1);\n"
"\n"
"def thGypsum_CCNP (expr pos,theta,sc,al)=\n"
"    U:=(.25u,.25u);\n"
"    T:=identity aligned al rotated theta scaled sc shifted pos;\n"
"    pickup PenC;\n"
"    thdraw (-.25u,0)--(.25u,0);\n"
"    thdraw (0,-.25u)--(0,.25u);\n"
"enddef;\n"
"\n"
"% @SYMBOL\n"
"% thAragonite_CCNP --\n"
"%\n"
"% @PREVIEW\n"
"%\n"
"% thAragonite_CCNP((.5,.5) inscale,0,1);\n"
"\n"
"def thAragonite_CCNP (expr pos,theta,sc,al)=\n"
"    U:=(.3u,.4u);\n"
"    T:=identity aligned al rotated theta scaled sc shifted pos;\n"
"    pickup PenC;\n"
"    thdraw (0,-.4u)--(0,.3u);\n"
"    thdraw (0,-.1u){dir 40}..{dir 5}(.3u,.08u);\n"
"    thdraw (0,-.1u){dir 140}..{dir 175}(-.3u,.08u);\n"
"    thdraw (0,.2u){dir 30}..{dir 5}(.25u,.3u);\n"
"    thdraw (0,.2u){dir 150}..{dir 175}(-.25u,.3u);\n"
"enddef;\n"
"\n"
"% @SYMBOL\n"
"% thCavepearl_JSSJ --\n"
"%\n"
"% @PREVIEW\n"
"%\n"
"% thCavepearl_JSSJ((.5,.5) inscale,0,1);\n"
"\n"
"def thCavepearl_JSSJ (expr pos,theta,sc,al)=\n"
"    U:=(.25u,.25u);\n"
"    T:=identity aligned al rotated theta scaled sc shifted pos;\n"
"    pickup PenC;\n"
"    p:=fullcircle scaled .25u shifted (0,.16u);\n"
"    thdraw p;\n"
"    thdraw p rotated 120;\n"
"    thdraw p rotated 240;\n"
"enddef;\n"
"\n"
"% @SYMBOL\n"
"% thGypsumflower_CCNP --\n"
"%\n"
"% @PREVIEW\n"
"%\n"
"% thGypsumflower_CCNP((.5,.5) inscale,0,1);\n"
"% @ENDSYMBOL\n"
"\n"
"def thGypsumflower_CCNP (expr pos,theta,sc,al)=\n"
"    U:=(.4u,.3u);\n"
"    T:=identity aligned al rotated theta scaled sc shifted pos;\n"
"    pickup PenC;\n"
"%    thdraw (.2u,0){left}..(0,.2u)..(.25u,.35u)..(.5u,0)..\n"
"%        (.1u,-.3u)..{dir 125}(-.5u,.2u);\n"
"    thdraw (.18u,0){left}..(0,.15u)..(.2u,.3u)..(.4u,0)..\n"
"        (.15u,-.28u)..{dir 120}(-.4u,.15u);\n"
"enddef;\n"
"\n"
"\n"
"\n"
"% @SYMBOL\n"
"% thRimstonepoolSymbol_ASF --\n"
"%\n"
"% @PREVIEW\n"
"%\n"
"% thRimstonepoolSymbol_ASF((.5,.5) inscale,0,1);\n"
"\n"
"def thRimstonepoolSymbol_ASF (expr pos,theta,sc,al)=\n"
"    U:=(.4u,.2u);\n"
"    T:=identity aligned al rotated theta scaled sc shifted pos;\n"
"    pickup PenC;\n"
"    p := (-.4u,.2u){dir -70}..{dir 70}(.4u,.2u);\n"
"    thfill buildcycle(p,((.5u,.1u)--(-.5u,.1u)));\n"
"    thdraw p;\n"
"enddef;\n"
"\n"
"% @SYMBOL\n"
"% thRimstonedamSymbol_ASF --\n"
"%\n"
"% @PREVIEW\n"
"%\n"
"% thRimstonedamSymbol_ASF((.5,.5) inscale,0,1);\n"
"\n"
"def thRimstonedamSymbol_ASF (expr pos,theta,sc,al)=\n"
"    U:=(.4u,.2u);\n"
"    T:=identity aligned al rotated theta scaled sc shifted pos;\n"
"    pickup PenC;\n"
"    thdraw (-.4u,.2u){dir -70}..{dir 70}(.4u,.2u);\n"
"enddef;\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"% @DESCRIPTION\n"
"% <H4>Erosive forms:</H4>\n"
"\n"
"% @SYMBOL\n"
"% thAnostomosen_UIS --\n"
"%\n"
"% @PREVIEW\n"
"%\n"
"% thAnostomosen_UIS((.5,.5) inscale,0,1);\n"
"\n"
"def thAnostomosen_UIS (expr pos,theta,sc,al)=\n"
"    U:=(.4u,.3u);\n"
"    T:=identity aligned al rotated theta scaled sc shifted pos;\n"
"    pickup PenC;\n"
"    p:=(-.4u,-.2u)--(-.3u,-.3u)--(0,.3u)--(.1u,.2u);\n"
"    thdraw p;\n"
"    thdraw p shifted (.3u,0);\n"
"enddef;\n"
"\n"
"% @SYMBOL\n"
"% thKarren_UIS --\n"
"%\n"
"% @PREVIEW\n"
"%\n"
"% thKarren_UIS((.5,.5) inscale,0,1);\n"
"\n"
"def thKarren_UIS (expr pos,theta,sc,al)=\n"
"    U:=(.5u,.4u);\n"
"    T:=identity aligned al rotated theta scaled sc shifted pos;\n"
"    pickup PenC;\n"
"    thdraw (-.5u,-.3u){dir -85}..{dir 85}(-.32u,-.3u)..(-.28u,.3u){dir 85}..\n"
"        {dir -85}(-.12u,.3u)..(-.08u,-.3u){dir-85}..{dir 85}(.08u,-.3u)..\n"
"        {dir85}(.12u,.3u)..(.28u,.3u){dir -85}..(.32u,-.3u){dir -85}..\n"
"        {dir 85}(.5u,-.3u);\n"
"enddef;\n"
"\n"
"% @SYMBOL\n"
"% thScallop_UIS --\n"
"%\n"
"% @PREVIEW\n"
"%\n"
"% thScallop_UIS((.5,.5) inscale,0,1);\n"
"\n"
"def thScallop_UIS (expr pos,theta,sc,al)=\n"
"    U:=(.2u,.4u);\n"
"    T:=identity aligned al rotated theta scaled sc shifted pos;\n"
"    pickup PenC;\n"
"    thdraw (0,-.4u){dir 125}..{dir 105}(-.2u,.1u){up}..\n"
"        {down}(.2u,.1u){dir -105}...{dir -125}(0,-.4u);\n"
"enddef;\n"
"\n"
"% @SYMBOL\n"
"% thFlute_UIS --\n"
"%\n"
"% @PREVIEW\n"
"%\n"
"% thFlute_UIS((.5,.5) inscale,0,1);\n"
"\n"
"def thFlute_UIS (expr pos,theta,sc,al)=\n"
"    U:=(.5u,.2u);\n"
"    T:=identity aligned al rotated theta scaled sc shifted pos;\n"
"    pickup PenC;\n"
"    thdraw (-.5u,.2u)--(.5u,.2u);\n"
"    thdraw (-.3u,.2u){dir -70}..{dir 70}(.3u,.2u);\n"
"enddef;\n"
"\n"
"% @SYMBOL\n"
"% thRaft_CCNP --\n"
"%\n"
"% @PREVIEW\n"
"%\n"
"% thRaft_CCNP((.5,.5) inscale,0,1);\n"
"\n"
"def thRaft_CCNP (expr pos,theta,sc,al)=\n"
"    U:=(.5u,.2u);\n"
"    T:=identity aligned al rotated theta scaled sc shifted pos;\n"
"    pickup PenC;\n"
"    thdraw (-.5u,.2u){dir -80}..(-.3u,-.2u)..origin..(.3u,.2u)..\n"
"        {dir -80}(.5u,-.2u);\n"
"enddef;\n"
"\n"
"% @SYMBOL\n"
"% thRaftcone_CCNP --\n"
"%\n"
"% @PREVIEW\n"
"%\n"
"% thRaftcone_CCNP((.5,.5) inscale,0,1);\n"
"\n"
"def thRaftcone_CCNP (expr pos,theta,sc,al)=\n"
"    U:=(.3u,.4u);\n"
"    T:=identity aligned al rotated theta scaled sc shifted pos;\n"
"    pickup PenC;\n"
"    thdraw (-.3u,-.4u)--(0,.4u)--(.3u,-.4u);\n"
"enddef;\n"
"\n"
"\n"
"def thSpring_SKBB (expr pos,theta,sc,al)=\n"
"  U:=(.3u,.2u);\n"
"  T:=identity aligned al rotated theta scaled sc shifted pos;\n"
"  pickup PenC;\n"
"  thdraw (-.3u,.2u){down}..(0,-.2u)..{up}(.3u,.2u);\n"
"enddef;\n"
"\n"
"def thSink_SKBB (expr pos,theta,sc,al)=\n"
"  U:=(.3u,.2u);\n"
"  T:=identity aligned al rotated theta scaled sc shifted pos;\n"
"  pickup PenC;\n"
"  thdraw (-.3u,-.2u){up}..(0,.2u)..{down}(.3u,-.2u);\n"
"enddef;\n"
"\n"
"% @DESCRIPTION\n"
"% <H4>End of passage:</H4>\n"
"\n"
"% @SYMBOL\n"
"% thNarrowend_UIS --\n"
"%\n"
"% Rotated perpendicular to passage walls can symbolize low end of the passage\n"
"%\n"
"% @PREVIEW\n"
"%\n"
"% thNarrowend_UIS((.5,.5) inscale,0,1);\n"
"\n"
"def thNarrowend_UIS (expr pos,theta,sc,al)=\n"
"    U:=(.1u,.4u);\n"
"    T:=identity aligned al rotated theta scaled sc shifted pos;\n"
"    pickup PenC;\n"
"    thdraw (-.1u,-.4u)--(-.1u,.4u);\n"
"    thdraw (.1u,-.4u)--(.1u,.4u);\n"
"enddef;\n"
"\n"
"def thLowend_UIS (expr pos,theta,sc,al)=\n"
"    U:=(.4u,.1u);\n"
"    T:=identity aligned al rotated theta scaled sc shifted pos;\n"
"    pickup PenC;\n"
"    thdraw (-.4u,-.1u)--(.4u,-.1u);\n"
"    thdraw (-.4u,.1u)--(.4u,.1u);\n"
"enddef;\n"
"\n"
"% @SYMBOL\n"
"% thLowend_CCNP --\n"
"%\n"
"% @PREVIEW\n"
"%\n"
"% thLowend_CCNP((.5,.5) inscale,0,1);\n"
"\n"
"def thLowend_CCNP (expr pos,theta,sc,al)=\n"
"    U:=(.4u,0);\n"
"    T:=identity aligned al rotated theta scaled sc shifted pos;\n"
"    pickup PenC;\n"
"    thdraw (-.4u,0)--(.4u,0);\n"
"enddef;\n"
"\n"
"% @SYMBOL\n"
"% thFlowstonechoke_CCNP --\n"
"%\n"
"% @PREVIEW\n"
"%\n"
"% thFlowstonechoke_CCNP((.5,.5) inscale,0,1);\n"
"\n"
"def thFlowstonechoke_CCNP (expr pos,theta,sc,al)=\n"
"    U:=(.4u,.3u);\n"
"    T:=identity aligned al rotated theta scaled sc shifted pos;\n"
"    pickup PenC;\n"
"    p:=(-.4u,-.4u){right}..{dir120}(-.2u,-.2u){dir -20}..{up}(0,0);\n"
"    thdraw p;\n"
"    thdraw p shifted (0,.2u);\n"
"    thdraw p reflectedabout (origin,down);\n"
"    thdraw p reflectedabout (origin,down) shifted (0,.2u);\n"
"enddef;\n"
"\n"
"% @SYMBOL\n"
"% thBreakdownchoke_CCNP --\n"
"%\n"
"% @PREVIEW\n"
"%\n"
"% thBreakdownchoke_CCNP((.5,.5) inscale,0,1);\n"
"\n"
"def thBreakdownchoke_CCNP (expr pos,theta,sc,al)=\n"
"    U:=(.5u,.2u);\n"
"    T:=identity aligned al rotated theta scaled sc shifted pos;\n"
"    pickup PenC;\n"
"    thdraw (-.5u,-.1u)--(-.15u,.05u)--(-.48u,.2u)--cycle;\n"
"    thdraw (-.2u,-.2u)--(.15u,-.18u)--(-.08u,.14u)--cycle;\n"
"    thdraw (.1u,0)--(.4u,-.1u)--(.5u,.2u)--(.1u,.2u)--cycle;\n"
"enddef;\n"
"\n"
"\n"
"\n"
"% @DESCRIPTION\n"
"% <H4>Symbolic passage fills:</H4>\n"
"\n"
"\n"
"% @SYMBOL\n"
"% thBedrock_ASF --\n"
"%\n"
"% @PREVIEW\n"
"%\n"
"% thBedrock_ASF((.5,.5) inscale,0,1);\n"
"\n"
"def thBedrock_ASF (expr pos,theta,sc,al)=\n"
"    U:=(.5u,.2u);\n"
"    T:=identity aligned al rotated theta scaled sc shifted pos;\n"
"    pickup PenC;\n"
"    thdraw (-.5u,0)--(.5u,0);\n"
"    thdraw (-.3u,0)--(-.3u,.2u);\n"
"    thdraw (.3u,0)--(.3u,-.2u);\n"
"enddef;\n"
"\n"
"% @SYMBOL\n"
"% thSandSymbol_UIS --\n"
"%\n"
"% @PREVIEW\n"
"%\n"
"% thSandSymbol_UIS((.5,.5) inscale,0,1);\n"
"\n"
"def thSandSymbol_UIS (expr pos,theta,sc,al)=\n"
"    U:=(.2u,.2u);\n"
"    T:=identity aligned al rotated theta scaled sc shifted pos;\n"
"    pickup PenB;\n"
"    thdraw (0,.2u);\n"
"    thdraw (0,.2u) rotated 120;\n"
"    thdraw (0,.2u) rotated 240;\n"
"enddef;\n"
"\n"
"% @SYMBOL\n"
"% thPebblesSymbol_UIS --\n"
"%\n"
"% @PREVIEW\n"
"%\n"
"% thPebblesSymbol_UIS((.5,.5) inscale,0,1);\n"
"\n"
"def thPebblesSymbol_UIS (expr pos,theta,sc,al)=\n"
"    U:=(.45u,.35u);\n"
"    T:=identity aligned al rotated theta scaled sc shifted pos;\n"
"    pickup PenC;\n"
"    p:=superellipse((.2u,0),(0,.1u),(-.2u,0),(0,.-.1u),.75);\n"
"    thdraw p rotated 20 shifted (0,.25u);\n"
"    thdraw p rotated -37 shifted (.25u,-.25u);\n"
"    thdraw p rotated -62 shifted (-.25u,-.25u);\n"
"enddef;\n"
"\n"
"% @SYMBOL\n"
"% thDebrisSymbol_UIS --\n"
"%\n"
"% @PREVIEW\n"
"%\n"
"% thDebrisSymbol_UIS((.5,.5) inscale,0,1);\n"
"\n"
"def thDebrisSymbol_UIS (expr pos,theta,sc,al)=\n"
"    U:=(.4u,.4u);\n"
"    T:=identity aligned al rotated theta scaled sc shifted pos;\n"
"    pickup PenC;\n"
"    thdraw (-.3u,-.4u)--(0,-.22u)--(-.4u,-.1u)--cycle;\n"
"    thdraw (.2u,-.4u)--(.4u,-.1u)--(.1u,-.1u)--cycle;\n"
"    thdraw (-.1u,0)--(.2u,.3u)--(-.2u,.3u)--cycle;\n"
"enddef;\n"
"\n"
"% @SYMBOL\n"
"% thBlocksSymbol_UIS --\n"
"%\n"
"% @PREVIEW\n"
"%\n"
"% thBlocksSymbol_UIS((.5,.5) inscale,0,1);\n"
"\n"
"def thBlocksSymbol_UIS (expr pos,theta,sc,al)=\n"
"    U:=(.5u,.5u);\n"
"    T:=identity aligned al rotated theta scaled sc shifted pos;\n"
"    pickup PenC;\n"
"    thdraw (-.5u,-.5u)--(.3u,-.4u)--(-.17u,.2u)--cycle;\n"
"    thdraw (.25u,-.25u)--(.5u,-.15u)--(.3u,.5u)--(-.1u,.5u)--cycle;\n"
"    thdraw (-.27u,0)--(-.1u,.3u)--(-.5u,.35u)--cycle;\n"
"    pickup PenD;\n"
"    thdraw (-.5u,-.5u)--(-.1u,-.2u)--(-.17u,.2u);\n"
"    thdraw (-.1u,-.2u)--(.3u,-.4u);\n"
"    thdraw (.25u,-.25u)--(.3u,0)--(.2u,.2u)--(-.1u,.5u);\n"
"    thdraw (.3u,.5u)--(.2u,.2u);\n"
"    thdraw (.5u,-.15u)--(.3u,0);\n"
"enddef;\n"
"\n"
"% @SYMBOL\n"
"% thWaterSymbol_UIS --\n"
"%\n"
"% @PREVIEW\n"
"%\n"
"% thWaterSymbol_UIS((.5,.5) inscale,0,1);\n"
"%\n"
"% @ENDSYMBOL\n"
"% @USE thLakePattern_UIS\n"
"\n"
"def thWaterSymbol_UIS (expr pos,theta,sc,al)=\n"
"    U:=(.425u,.3u);\n"
"    T:=identity aligned al rotated theta scaled sc shifted pos;\n"
"    pickup PenD;\n"
"    p:=fullcircle xscaled (.85u) yscaled (.6u);\n"
"    thfill p withpattern thLakePattern_UIS;\n"
"    thdraw p;\n"
"enddef;\n"
"\n"
"% @SYMBOL\n"
"% thIceSymbol_UIS --\n"
"%\n"
"% @PREVIEW\n"
"%\n"
"% thIceSymbol_UIS((.5,.5) inscale,0,1);\n"
"\n"
"def thIceSymbol_UIS (expr pos,theta,sc,al)=\n"
"    U:=(.4u,.35u);\n"
"    T:=identity aligned al rotated theta scaled sc shifted pos;\n"
"    pickup PenD;\n"
"    thdraw (-.4u,-.1u)--(.4u,-.1u) dashed evenly;\n"
"    thdraw (-.2u,.2u)--(.2u,.2u) dashed evenly;\n"
"    pickup PenC;\n"
"    p := (0,.05u)--(0,.35u);\n"
"    thdraw p;\n"
"    thdraw p shifted (-.2u,-.3u);\n"
"    thdraw p shifted (.2u,-.3u);\n"
"enddef;\n"
"\n"
"\n"
"% @DESCRIPTION\n"
"% <H4>Various materials:</H4>\n"
"\n"
"% @SYMBOL\n"
"% thArcheological_UIS --\n"
"%\n"
"% @PREVIEW\n"
"%\n"
"% thArcheological_UIS((.5,.5) inscale,0,1);\n"
"\n"
"def thArcheological_UIS (expr pos,theta,sc,al)=\n"
"    U:=(.4u,.4u);\n"
"    T:=identity aligned al rotated theta scaled sc shifted pos;\n"
"    pickup PenC;\n"
"    p := fullcircle scaled .8u; \n"
"    thdraw (-.5u,-.5u)--origin cutbefore p;\n"
"    thdraw (-.5u,.5u)--origin cutbefore p;\n"
"    thdraw origin--(.4u,0);\n"
"    thdraw p;\n"
"enddef;\n"
"\n"
"% @SYMBOL\n"
"% thPaleontological_UIS --\n"
"%\n"
"% @PREVIEW\n"
"%\n"
"% thPaleontological_UIS((.5,.5) inscale,0,1);\n"
"\n"
"def thPaleontological_UIS (expr pos,theta,sc,al)=\n"
"    U:=(.4u,.4u);\n"
"    T:=identity aligned al rotated theta scaled sc shifted pos;\n"
"    thfill (-.4u,-.2u)..(-.2u,-.08u)---(-.1u,.05u)---(0,.2u)..(-.03u,.4u)..\n"
"        (.2u,.3u)..(.35u,.25u)..(.2u,.2u)---origin---(-.1u,-.17u)..\n"
"        (-.08u,-.25u){dir -120}..(-.3u,-.23u)\n"
"        ..cycle;\n"
"enddef;\n"
"\n"
"% @SYMBOL\n"
"% thGuano_UIS --\n"
"%\n"
"% @PREVIEW\n"
"%\n"
"% thGuano_UIS((.5,.5) inscale,0,1);\n"
"\n"
"def thGuano_UIS (expr pos,theta,sc,al)=\n"
"    U:=(.4u,.35u);\n"
"    T:=identity aligned al rotated theta scaled sc shifted pos;\n"
"    pickup PenC;\n"
"    thdraw (-.4u,.2u){dir 40}..{down}(0,-.35u){up}..{dir-40}(.4u,.2u);\n"
"enddef;\n"
"\n"
"% @SYMBOL\n"
"% thVegetabledebris_ASF --\n"
"%\n"
"% @PREVIEW\n"
"%\n"
"% thVegetabledebris_ASF((.5,.5) inscale,0,1);\n"
"\n"
"def thVegetabledebris_ASF (expr pos,theta,sc,al)=\n"
"    U:=(.38u,.3u);\n"
"    T:=identity aligned al rotated theta scaled sc shifted pos;\n"
"    pickup PenC;\n"
"    thdraw (-.3u,-.3u)--(0,.3u);\n"
"    thdraw (0,-.3u)--(.3u,.3u);\n"
"    thdraw (-.25u,.13u)--(.38u,.13u);\n"
"    thdraw (-.38u,-.13u)--(.25u,-.13u);\n"
"enddef;\n"
"\n"
"% @SYMBOL\n"
"% thRoot_ASF --\n"
"%\n"
"% @PREVIEW\n"
"%\n"
"% thRoot_ASF((.5,.5) inscale,0,1);\n"
"\n"
"def thRoot_ASF (expr pos,theta,sc,al)=\n"
"    U:=(.1u,.5u);\n"
"    T:=identity aligned al rotated theta scaled sc shifted pos;\n"
"    pickup PenC;\n"
"    thdraw (-.1u,-.5u)--(-.1u,.5u);\n"
"    p:=(-.1u,-.3u)--(.1u,-.5u);\n"
"    thdraw p;\n"
"    thdraw p shifted (0,.2u);\n"
"    thdraw p shifted (0,.4u);\n"
"enddef;\n"
"\n"
"% @DESCRIPTION\n"
"% <H4>Arrows:</H4>\n"
"\n"
"% @SYMBOL\n"
"% thEntrancearrow_UIS --\n"
"%\n"
"% @PREVIEW\n"
"%\n"
"% thEntrancearrow_UIS((.5,.5) inscale,0,1);\n"
"\n"
"def thEntrancearrow_UIS (expr pos,theta,sc,al)=\n"
"    U:=(.2u,.5u);\n"
"    T:=identity aligned al rotated theta scaled sc shifted pos;\n"
"    thfill (-.2u,-.5u)--(0,.5u)--(.2u,-.5u)--cycle;\n"
"enddef;\n"
"\n"
"% @SYMBOL\n"
"% thPaleoflow_UIS --\n"
"%\n"
"% @PREVIEW\n"
"%\n"
"% thPaleoflow_UIS((.5,.5) inscale,0,1);\n"
"\n"
"def thPaleoflow_UIS (expr pos,theta,sc,al)=\n"
"    U:=(.2u,u);\n"
"    T:=identity aligned al rotated theta scaled sc shifted pos;\n"
"    pickup PenC;\n"
"    thdraw (0,-u)--(0,u);\n"
"    thdraw halfcircle scaled .4u shifted (0,-.4u);\n"
"    p:=(-.15u,.6u)--(0,u)--(.15u,.6u)--cycle;\n"
"    thfill p;\n"
"    thdraw p;\n"
"enddef;\n"
"\n"
"% @SYMBOL\n"
"% thGradientarrow_UIS --\n"
"%\n"
"% @PREVIEW\n"
"%\n"
"% thGradientarrow_UIS((.5,.5) inscale,0,1);\n"
"\n"
"def thGradientarrow_UIS (expr pos,theta,sc,al)=\n"
"    U:=(.15u,u);\n"
"    T:=identity aligned al rotated theta scaled sc shifted pos;\n"
"    pickup PenC;\n"
"    thdraw (0,-u)--(0,u);\n"
"    p:=(-.15u,.6u)--(0,u)--(.15u,.6u)--cycle;\n"
"    thfill p;\n"
"    thdraw p;\n"
"enddef;\n"
"\n"
"% @SYMBOL\n"
"% thPermanentstreamarrow_UIS --\n"
"%\n"
"% @PREVIEW\n"
"%\n"
"% thPermanentstreamarrow_UIS((.5,.5) inscale,0,1);\n"
"\n"
"def thPermanentstreamarrow_UIS (expr pos,theta,sc,al)=\n"
"    U:=(.15u,.5u);\n"
"    T:=identity aligned al rotated theta scaled sc shifted pos;\n"
"    pickup PenC;\n"
"    p:=(0,.5u){down}..(.12u,.3u)..(-.15u,.15u)..(.13u,0)..\n"
"        (-.08u,-.2u)..{down}(0,-.5u);\n"
"    p:=p rotated 180;\n"
"    thdraw p;\n"
"    oldahlength:=ahlength; ahlength:=2.5pt;\n"
"    thfill arrowhead p;\n"
"    ahlength:=oldahlength;\n"
"enddef;\n"
"\n"
"% @SYMBOL\n"
"% thIntermittentstreamarrow_UIS --\n"
"%\n"
"% @PREVIEW\n"
"%\n"
"% thIntermittentstreamarrow_UIS((.5,.5) inscale,0,1);\n"
"\n"
"def thIntermittentstreamarrow_UIS (expr pos,theta,sc,al)=\n"
"  drawoptions(dashed evenly scaled .5);\n"
"  thPermanentstreamarrow_UIS (pos,theta,sc,al);\n"
"  drawoptions();\n"
"enddef;\n"
"\n"
"% @SYMBOL\n"
"% thAirflowarrow_UIS --\n"
"%\n"
"% @PREVIEW\n"
"%\n"
"% thAirflowarrow_UIS((.5,.5) inscale,0,1,3);\n"
"\n"
"def thAirflowarrow_UIS (expr pos,theta,sc,intens,al)=\n"
"  U:=(.2u,u);\n"
"  T:=identity aligned al rotated theta scaled sc shifted pos;\n"
"  pickup PenC;\n"
"  thdraw (0,u)--(0,-0.75u);\n"
"\tp:=(-.2u,.65u){dir 20}..{dir 90}(0,u);\n"
"\tthdraw p;\n"
"\tthdraw p reflectedabout (origin,(0,u));\n"
"\tfor i:=1 upto intens:\n"
"\t  thdraw (0,-(1-0.2i)*u)--(.2u,-(1-0.2(i-1))*u);\n"
"\tendfor;\n"
"enddef;\n"
"\n"
"def thSectionarrow_SKBB (expr pos,theta)=\n"
"    T:=identity rotated theta shifted pos;\n"
"    pickup PenC;\n"
"    thdraw (0,0)--(0,.8u);\n"
"    thdraw (-.1u,.55u)--(0,.8u)--(.1u,.55u);\n"
"enddef;\n"
"\n"
"\n"
"\n"
"% @SYMBOL\n"
"% thUndefinedSymbol --\n"
"%\n"
"% @PREVIEW\n"
"%\n"
"% thUndefinedSymbol((.5,.5) inscale,0,1);\n"
"\n"
"def thUndefinedSymbol(expr pos,theta,sc,al)=\n"
"    U:=(.4u,.4u);\n"
"    T:=identity aligned al scaled sc shifted pos;\n"
"    pickup PenC;\n"
"    thdraw fullcircle scaled 0.8u withcolor red;\n"
"    message(\"[Warning: undefined point symbol used]\");\n"
"enddef;\n"
"\n"
"% @DESCRIPTION\n"
"% <H4>Survey stations:</H4>\n"
"\n"
"% @SYMBOL\n"
"% thFixedstation_ASF --\n"
"%\n"
"% @PREVIEW\n"
"%\n"
"% thFixedstation_ASF((.5,.5) inscale);\n"
"\n"
"def thFixedstation_ASF (expr pos)=\n"
"    T:=identity shifted pos;\n"
"    pickup PenD;\n"
"    pair z;\n"
"    z:=(0,.2u);\n"
"    thclean z -- (z rotated 120) -- (z rotated 240) -- cycle;\n"
"    thdraw z -- (z rotated 120) -- (z rotated 240) -- cycle;\n"
"    thdraw origin;\n"
"enddef;\n"
"\n"
"def thPaintedstation_SKBB (expr pos)=\n"
"    T:=identity shifted pos;\n"
"    pickup PenC;\n"
"    thclean fullcircle scaled 0.25u;\n"
"    thdraw fullcircle scaled 0.25u;\n"
"enddef;\n"
"\n"
"\n"
"% @SYMBOL\n"
"% thNaturalstation_ASF --\n"
"%\n"
"% @PREVIEW\n"
"%\n"
"% thNaturalstation_ASF((.5,.5) inscale);\n"
"\n"
"def thNaturalstation_ASF (expr pos)=\n"
"    T:=identity shifted pos;\n"
"    pickup PenD;\n"
"    thclean fullcircle scaled .3u;\n"
"    thdraw fullcircle scaled .3u;\n"
"    thdraw origin;\n"
"enddef;\n"
" \n"
"% @SYMBOL\n"
"% thTemporarystation_ASF --\n"
"%\n"
"% @PREVIEW\n"
"%\n"
"% thTemporarystation_ASF((.5,.5) inscale);\n"
"\n"
"def thTemporarystation_ASF (expr pos)=\n"
"    T:=identity shifted pos;\n"
"    pickup PenD;\n"
"    p:=(-.2u,0)--(.2u,0);\n"
"    thdraw p;\n"
"    thdraw p rotated 90;\n"
"    thclean fullcircle scaled .16u;\n"
"    pickup PenC;\n"
"    thdraw origin;\n"
"enddef;\n"
"\n"
"def NoMorphStation (expr pos)=\n"
"    T:=identity shifted pos;\n"
"    thdraw origin withpen pencircle scaled 3pt withcolor blue;\n"
"enddef;\n"
"\n"
" \n"
"% @DESCRIPTION\n"
"% \n"
"% <H3>Equipment</H3>\n"
"\n"
"% @SYMBOL\n"
"% thEquipmentSymbol_SKBB --\n"
"%\n"
"% @PREVIEW\n"
"%\n"
"% thEquipmentSymbol_SKBB((.5,.5) inscale,2,\"us\");\n"
"% @USE thCircledlabel\n"
"\n"
"% alignment!\n"
"\n"
"def thEquipmentSymbol_SKBB(expr pos,type) =\n"
"  begingroup\n"
"  interim defaultscale:=0.8;\n"
"  thCircledlabel(\n"
"  if lang=\"en\":\n"
"    if type=1: \"R\"        % rope\n"
"  \telseif type=2: \"Lf\"   % fixed ladder\n"
"  \telseif type=3: \"Lr\"   % rope ladder\n"
"  \telseif type=4: \"S\"    % steps\n"
"  \telseif type=5: \"B\"    % bridge\n"
"  \telseif type=6: \"T\"    % traverse\n"
"  \telseif type=7: \"A\"    % anchor\n"
"  \telseif type=8: \"!\"    % not equipped\n"
"  \tfi\n"
"  elseif lang=\"sk\":\n"
"    if type=1: \"L\"\n"
"  \telseif type=2: \"R\"\n"
"  \telseif type=3: \"Rl\"\n"
"  \telseif type=4: \"S\"\n"
"  \telseif type=5: \"M\"\n"
"  \telseif type=6: \"T\"\n"
"  \telseif type=7: \"K\"\n"
"  \telseif type=8: \"!\"\n"
"  \tfi\n"
"\tfi\n"
"    ,pos);\n"
"  endgroup;\n"
"enddef;\n"
"\n"
"% doesn't call process_label();\n"
"\n"
"def thContinuation_UIS(expr pos,theta,sc,al) =\n"
"   draw thelabel(\"?\", pos);\n"
"enddef;\n"
"\n\n\n%%%%% ENDINPUT thPoint %%%%%\n\n\n"
"\n\n\n%%%%% INPUT thLine %%%%%\n\n\n"
"%% therion source code\n"
"%%\n"
"%% thLine -- therion project file of type metapost symbol library\n"
"%%\n"
"%% This file defines macros for line symbols\n"
"%%\n"
"%% $Date: 2002/07/30 15:12:32 $\n"
"%% $RCSfile: thLine.mp,v $\n"
"%% $Revision: 1.1 $\n"
"%%\n"
"%% Copyright (C) 2000 Martin Budaj\n"
"%%\n"
"%% -------------------------------------------------------------------- \n"
"%% This program is free software; you can redistribute it and/or modify\n"
"%% it under the terms of the GNU General Public License as published by\n"
"%% the Free Software Foundation; either version 2 of the License, or\n"
"%% any later version.\n"
"%%\n"
"%% This program is distributed in the hope that it will be useful,\n"
"%% but WITHOUT ANY WARRANTY; without even the implied warranty of\n"
"%% MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n"
"%% GNU General Public License for more details.\n"
"%% \n"
"%% You should have received a copy of the GNU General Public License\n"
"%% along with this program; if not, write to the Free Software\n"
"%% Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n"
"%% --------------------------------------------------------------------\n"
"\n"
"% some definitions\n"
"\n"
"vardef adjust_step (expr L, S) =     % krok is stretched a bit\n"
"  if S <= L: L / (floor(L / S))      % according to length of path\n"
"  else: L fi\n"
"enddef;\n"
"\n"
"def mark_(expr p,t,l) =\n"
"  thdraw (point t of p) --\n"
"          ((point t of p) + l * unitvector(thdir(p,t) rotated 90));\n"
"enddef;\n"
"\n"
"vardef thdir (expr p,t) = \n"
"  ((direction t-epsilon of p) + (direction t+epsilon of p)) / 2\n"
"enddef;\n"
"\n"
"% walls:\n"
"\n"
"def thWall_UIS (expr P) = \n"
"  T:=identity;\n"
"  pickup PenA;\n"
"  thdraw P;\n"
"enddef;\n"
"\n"
"def thSandwall_SKBB (expr P) = \n"
"  T:=identity;\n"
"  cas := 0;\n"
"  dlzka := arclength P;\n"
"  mojkrok:=adjust_step(dlzka, 0.1u);\n"
"  pickup PenB;  \n"
"  forever:\n"
"    t := arctime cas of P;\n"
"    thdraw ((point t of P) + (uniformdeviate 1) * .4u \n"
"            * unitvector(thdir(P,t) rotated -90));\n"
"    cas := cas + mojkrok;\n"
"    exitif cas > dlzka + (mojkrok / 3); % for rounding errors\n"
"  endfor;\n"
"  pickup PenA;  \n"
"  thdraw P;\n"
"enddef;\n"
"\n"
"def thClaywall_SKBB (expr P) = \n"
"  T:=identity;\n"
"  thUndefinedPath(P);\n"
"enddef;\n"
"\n"
"def thPebbleswall_SKBB (expr P) = \n"
"  T:=identity;\n"
"  thUndefinedPath(P);\n"
"enddef;\n"
"\n"
"def thDebriswall_SKBB (expr P) = \n"
"  T:=identity;\n"
"  cas := 0;\n"
"  dlzka := arclength P;\n"
"  mojkrok:=adjust_step(dlzka, .35u);\n"
"  pickup PenC;\n"
"  q := ((-.1u,-.15u)--(.2,.03u)--(-.2u,.15u)--cycle) scaled 1.5;\n"
"  forever:\n"
"    t := arctime (cas + mojkrok/2) of P;\n"
"    thdraw q randomized .2mm rotated uniformdeviate (360) shifted point t of P;\n"
"    cas := cas + mojkrok;\n"
"    exitif cas > dlzka - (2*mojkrok/3); % for rounding errors\n"
"  endfor;\n"
"enddef;\n"
"\n"
"def thBlockswall_SKBB (expr P) = \n"
"%  pickup PenD;\n"
"%  draw P withcolor red;\n"
"\n"
"  T:=identity;\n"
"  cas := 0;\n"
"  dlzka := arclength P;\n"
"if dlzka > 0:\n"
"  mojkrok:=adjust_step(dlzka, 1.5u);\n"
"  pickup PenA;\n"
"  forever:\n"
"    t1 := arctime (cas + mojkrok*1/10) of P;\n"
"    t2 := arctime (cas + mojkrok*9/10) of P;\n"
"    q := ((point t1 of P) + .4u * unitvector(thdir(P,t1) rotated -90)) --\n"
"         (subpath (t1,t2) of P) --\n"
"         ((point t2 of P) + .4u * unitvector(thdir(P,t2) rotated -90));\n"
"    thdraw q randomized 1mm;\n"
"    cas := cas + mojkrok;\n"
"    exitif cas > dlzka - (2*mojkrok/3); % for rounding errors\n"
"  endfor;\n"
"fi;\n"
"enddef;\n"
"\n"
"def thIcewall_SKBB (expr P) = \n"
"  T:=identity;\n"
"  thUndefinedPath(P);\n"
"enddef;\n"
"\n"
"def thUnderlyingwall_UIS (expr P) = \n"
"  T:=identity;\n"
"  pickup PenA;\n"
"  thdraw P dashed evenly;\n"
"enddef;\n"
"\n"
"def thUnsurveyedwall_SKBB (expr P) = \n"
"  T:=identity;\n"
"  pickup PenC;\n"
"  thdraw P;\n"
"enddef;\n"
"\n"
"def thPresumedwall_UIS (expr P) = \n"
"  T:=identity;\n"
"  pickup PenA;\n"
"  thdraw P dashed evenly scaled 2;\n"
"enddef;\n"
"\n"
"% other line symbols\n"
"\n"
"def thPit_UIS (expr P) = \n"
"  T:=identity;\n"
"  cas := 0;\n"
"  dlzka := arclength P;\n"
"  mojkrok:=adjust_step(dlzka, 0.25u);\n"
"  pickup PenD;  \n"
"  forever:\n"
"    t := arctime cas of P;\n"
"    mark_ (P,t,0.2u);\n"
"    cas := cas + mojkrok;\n"
"    exitif cas > dlzka + (mojkrok / 3); % for rounding errors\n"
"  endfor;\n"
"  pickup PenC;  \n"
"  thdraw P;\n"
"enddef;\n"
"\n"
"def thOverhang_SKBB (expr P) =\n"
"  T:=identity;\n"
"  cas := 0;\n"
"  dlzka := arclength P;\n"
"  mojkrok:=adjust_step(dlzka, 0.3u);\n"
"  pickup PenC;\n"
"  t1:=0;\n"
"  forever:\n"
"    t := arctime (cas + mojkrok/2) of P;\n"
"    t2 := arctime (cas + mojkrok) of P;\n"
"    thfill (subpath (t1,t2) of P) -- \n"
"      ((point t of P) + .3u * unitvector(thdir(P,t) rotated 90)) -- \n"
"      cycle;\n"
"    cas := cas + mojkrok;\n"
"    exitif cas > dlzka - (2*mojkrok/3); % for rounding errors\n"
"    t1:=t2;\n"
"  endfor;\n"
"  thdraw P;\n"
"enddef;\n"
"\n"
"\n"
"def thChimney_UIS (expr P) = \n"
"  T:=identity;\n"
"  pickup PenC;\n"
"  thdraw P dashed evenly;\n"
"enddef;\n"
"\n"
"def thChimney_SKBB (expr P) =\n"
"  T:=identity;\n"
"  cas := 0;\n"
"  dlzka := arclength P;\n"
"  mojkrok:=adjust_step(dlzka, 0.8u);\n"
"  pickup PenC;\n"
"  forever:\n"
"    t1 := arctime (cas + mojkrok*1/5) of P;\n"
"    t  := arctime (cas + mojkrok/2) of P;\n"
"    t2 := arctime (cas + mojkrok*4/5) of P;\n"
"    thdraw (subpath (t1,t2) of P);\n"
"    mark_ (P,t,0.2u);\n"
"    cas := cas + mojkrok;\n"
"    exitif cas > dlzka - (2*mojkrok/3); % for rounding errors\n"
"  endfor;\n"
"enddef;\n"
"\n"
"def thSlope_UIS (expr P, showline, widthA, widthB) = \n"
"  T:=identity;\n"
"  boolean par;\n"
"  cas := 0;\n"
"  krok := 0.7u;\n"
"  dlzka := arclength P;\n"
"  mojkrok:=adjust_step(dlzka,1.4u) / 2;\n"
"  pickup PenD;\n"
"  par := false; \n"
"  forever:\n"
"    t := arctime cas of P;\n"
"    width:=(cas/dlzka)[widthA,widthB];\n"
"%   show width;\n"
"    if par: mark_(P,t,.33*width) \n"
"    else: mark_(P,t,width) fi;\n"
"    cas := cas + mojkrok;\n"
"    par := not par;\n"
"    exitif cas > dlzka + (krok / 3);  % for rounding errors\n"
"  endfor;\n"
"  if showline = 1: pickup PenC; draw P fi;\n"
"enddef;\n"
"\n"
"\n"
"boolean alw_perpendicular;\n"
"\n"
"def thSlope_SKBB (expr P,S)(text Q) = \n"
"%show Q;\n"
"  T:=identity;\n"
"  numeric dirs[];\n"
"  numeric lengths[];\n"
"  for i=Q:\n"
"    dirs[redpart i]:=greenpart i;\n"
"    lengths[redpart i]:=bluepart i;\n"
"  endfor;  \n"
"\n"
"\n"
"  li:=length(P); % last\n"
"\n"
"  alw_perpendicular:=true;\n"
"\n"
"  for i=0 upto li:\n"
"    if unknown dirs[i]: dirs[i]:=-1; \n"
"    else: \n"
"      if dirs[i]>-1:\n"
"        dirs[i]:=(90-dirs[i]) mod 360; \n"
"        alw_perpendicular:=false;\n"
"      fi;\n"
"    fi;\n"
"    if unknown lengths[i]: lengths[i]:=-1; fi;\n"
"  endfor;\n"
"\n"
"% for i=0 upto li: show dirs[i]; endfor;\n"
"\n"
"  ni:=0; % next\n"
"  pi:=0; % previous\n"
"\n"
"  for i=0 upto li:\n"
"    d:=dirs[i];\n"
"    if d=-1:\n"
"      if (i=0) or (i=li):\n"
"        dirs[i] := angle(thdir(P,i) rotated 90) mod 360;\n"
"\tpi:=i;\n"
"      else:\n"
"        if ni<=i:\n"
"\t  for j=i upto li:\n"
"            ni:=j;\n"
"\t    exitif dirs[j]>-1;\n"
"\t  endfor;\n"
"\tfi;\n"
"\tw:=arclength(subpath(pi,i) of P) / \n"
"\t   arclength(subpath(pi,ni) of P);\n"
"\tdirs[i]:=w[dirs[pi],dirs[ni]];\n"
"%        if (dirs[i]-angle(thdir(P,i))) mod 360>180:\n"
"%          dirs[i]:=w[dirs[ni],dirs[pi]];\n"
"%\t  message(\"*******\");\n"
"%        fi;\n"
"     fi;\n"
"    else:\n"
"      pi:=i;\n"
"    fi;\n"
"  endfor;\n"
"\n"
"% for i=0 upto li: show dirs[i]; endfor;\n"
"\n"
"  ni:=0; % next\n"
"  pi:=0; % previous\n"
"\n"
"  for i=0 upto li:\n"
"    l:=lengths[i];\n"
"    if l=-1:\n"
"      if (i=0) or (i=li):\n"
"        lengths[i] := 1cm; % should never happen!\n"
"\tmessage(\"Warning: slope width at the end point not specified!\");\n"
"\tpi:=i;\n"
"      else:\n"
"        if ni<=i:\n"
"\t  for j=i+1 upto li:\n"
"            ni:=j;\n"
"\t    exitif lengths[j]>-1;\n"
"\t  endfor;\n"
"\tfi;\n"
"\tw:=arclength(subpath(pi,i) of P) / \n"
"\t   arclength(subpath(pi,ni) of P);\n"
"\tlengths[i]:=w[lengths[pi],lengths[ni]];\n"
"\tpi:=i;\n"
"      fi;\n"
"    else:\n"
"      pi:=i;\n"
"    fi;\n"
"  endfor;\n"
"\n"
"% for i=0 upto li: show lengths[i]; endfor;\n"
"\n"
"  T:=identity;\n"
"  boolean par;\n"
"  cas := 0.3u;\n"
"  krok := 0.7u;\n"
"  dlzka := (arclength P);\n"
"  if dlzka>3u: dlzka:=dlzka-0.6u fi;\n"
"  mojkrok:=adjust_step(dlzka,1.4u) / 2;\n"
"  pickup PenD;\n"
"  par := false; \n"
"  forever:\n"
"    t := arctime cas of P;\n"
"    if t mod 1>0:  % not a key point\n"
"      w := (arclength(subpath(floor t,t) of P) / \n"
"            arclength(subpath(floor t,ceiling t) of P));\n"
"      if alw_perpendicular:\n"
"        a := angle(thdir(P,t))+90;\n"
"      else:\n"
"        a := w[dirs[floor t],dirs[ceiling t]];\n"
"      fi;\n"
"      l := w[lengths[floor t],lengths[ceiling t]];\n"
"    else:\n"
"      if alw_perpendicular:\n"
"        a := angle(thdir(P,t))+90;\n"
"      else:\n"
"        a:= dirs[t];\n"
"      fi; \n"
"      l:=lengths[t];\n"
"    fi;\n"
"%    if (a-angle(thdir(P,t))) mod 360>180:\n"
"%      a:=a-180;\n"
"%    fi;\n"
"    thdraw (point t of P) -- \n"
"      ((point t of P) + if par: 0.333 * fi l * unitvector(dir(a)));\n"
"    cas := cas + mojkrok;\n"
"    par := not par;\n"
"    exitif cas > dlzka + .3u + (krok / 3);  % for rounding errors\n"
"  endfor;\n"
"  if S = 1: pickup PenC; draw P fi;\n"
"%pickup pencircle scaled 3pt;\n"
"%for i=0 upto li: draw point i of P; endfor;\n"
"enddef;\n"
"\n"
"\n"
"def thContour_UIS(expr P)(text txt) =      % osetrit Reverse!\n"
"  T:=identity;\n"
"  pickup PenD;\n"
"  thdraw P;\n"
"  for pnt=txt:\n"
"    if pnt=-1:\n"
"      mark_(P,arctime(arclength(P)/2) of P, 0.2u);\n"
"    else:\n"
"      mark_(P,pnt,0.2*u);\n"
"    fi;\n"
"    exitif pnt=-1;\n"
"  endfor;\n"
"enddef;\n"
"\n"
"\n"
"def thRockborder_UIS (expr P) = \n"
"  T:=identity;\n"
"  pickup PenC;\n"
"  thdraw P;\n"
"enddef;\n"
"\n"
"\n"
"def thRockedge_UIS (expr P) = \n"
"  T:=identity;\n"
"  pickup PenD;\n"
"  thdraw P;\n"
"enddef;\n"
"\n"
"\n"
"\n"
"\n"
"def thBorder_SKBB (expr Path) =\n"
"  T:=identity;\n"
"  pickup PenC;\n"
"  draw Path;\n"
"enddef;\n"
"\n"
"def thTemporaryBorder_SKBB (expr Path) =\n"
"  T:=identity;\n"
"  pickup PenC;\n"
"  draw Path dashed evenly;\n"
"enddef;\n"
"\n"
"\n"
"\n"
"def thFlowstonepath_UIS (expr P) = \n"
"  T:=identity;\n"
"  cas := 0;\n"
"  dlzka := arclength P;\n"
"  mojkrok:=adjust_step(dlzka, .7u);\n"
"  pickup PenC;  \n"
"  t1:=0;\n"
"  forever:\n"
"    t2 := arctime (cas + mojkrok) of P;\n"
"    thdraw (point t1 of P){dir (angle(thdir(P,t1)) + 60)} ..\n"
"           {dir (angle(thdir(P,t2)) - 60)}(point t2 of P);\n"
"    cas := cas + mojkrok;\n"
"    exitif cas > dlzka + (mojkrok / 3); % for rounding errors\n"
"    t1:=t2;\n"
"  endfor;\n"
"enddef;\n"
"\n"
"\n"
"PolygonLine:=.8u;\n"
"%PolygonPoint:=0.25u;\n"
"\n"
"def thPolygon_SKBB (expr P) =\n"
"  T:=identity;\n"
"  pair zz[];\n"
"  pickup PenC;\n"
"  for t = 0 upto length P - 1:\n"
"    zz1 := point t of P;\n"
"    zz2 := point t+1 of P;\n"
"    if length (zz2-zz1) > 2*PolygonLine:\n"
"      thdraw zz1 -- zz1 + PolygonLine * unitvector(zz2 - zz1);\n"
"      thdraw zz2 -- zz2 + PolygonLine * unitvector(zz1 - zz2);\n"
"    else:\n"
"      thdraw zz1 -- zz2;\n"
"    fi;\n"
"%    p := fullcircle scaled PolygonPoint shifted (zz1);\n"
"%    q := fullcircle scaled PolygonPoint shifted (zz2);\n"
"%    thunfill p;\n"
"%    thunfill q;\n"
"%    thdraw p;\n"
"%    thdraw q;\n"
"  endfor;\n"
"enddef;\n"
"\n"
"def thPolygon_JSSJ (expr P) =\n"
"  T:=identity;\n"
"  pair zz[];\n"
"  pickup PenC;\n"
"  for t = 0 upto length P - 1:\n"
"    zz1 := point t of P;\n"
"    zz2 := point t+1 of P;\n"
"    draw zz1 -- zz2;\n"
"%    p := fullcircle scaled PolygonPoint shifted (zz1);\n"
"%    q := fullcircle scaled PolygonPoint shifted (zz2);\n"
"%    thunfill p;\n"
"%    thunfill q;\n"
"%    thdraw p;\n"
"%    thdraw q;\n"
"  endfor;\n"
"enddef;\n"
"\n"
"\n"
"def ShiftedPath_A (expr Path, Dist, Az) =\n"
"    path ppp,pp[];\n"
"    pair Dir[];\n"
"    for t = 0 upto length Path - 1:\n"
"        pair zz[];\n"
"        Dir1 := dir((angle(direction t-epsilon of Path) + \n"
"                     angle(direction t+epsilon of Path)) / 2);\n"
"        Dir2 := dir((angle(direction t+1-epsilon of Path) + \n"
"                     angle(direction t+1+epsilon of Path)) / 2);                 \n"
"        zooma := 1 / (cosd(angle(direction t+epsilon of Path) - angle(Dir1)));\n"
"        zoomb := 1 / (cosd(angle(direction t+1-epsilon of Path) - angle(Dir2)));\n"
"        zz1 := point t of Path;    zz2 := point t+1 of Path;\n"
"        zz3 := postcontrol t of Path;    zz4 := precontrol t+1 of Path;\n"
"        if abs(angle(Dir1) - angle(Dir2)) > 10*epsilon:\n"
"\n"
"            zz0 = (zz1 + whatever * (Dir1 rotated 90)) \n"
"                = (zz2 + whatever * (Dir2 rotated 90));\n"
"            zz5 := zz1 + (Dist * zooma * unitvector(Dir1 rotated Az));\n"
"            zz6 := zz2 + (Dist * zoomb * unitvector(Dir2 rotated Az));\n"
"            zz7 = zz5 + whatever * (zz3-zz1) = zz0 + whatever * (zz3-zz0);\n"
"            zz8 = zz6 + whatever * (zz4-zz2) = zz0 + whatever * (zz4-zz0);\n"
"%            for i = 0: drawdot zz[i]; endfor;\n"
"%            draw zz1--zz0--zz2;\n"
"        else:\n"
"            def Shift = (Dist * unitvector(Dir1 rotated Az)) enddef;\n"
"            zz5 := zz1 + Shift;\n"
"            zz6 := zz2 + Shift;\n"
"            zz7 := zz3 + Shift;\n"
"            zz8 := zz4 + Shift;\n"
"        fi;\n"
"        pp[t] := zz5 .. controls zz7 and zz8 .. zz6;\n"
"    endfor;\n"
"    ppp := pp[0];\n"
"    for t = 1 upto length Path - 1:\n"
"        ppp := ppp -- pp[t];\n"
"    endfor;\n"
"enddef;\n"
"\n"
"def DoublePit_A (expr Path, Dist) =\n"
"    ShiftedPath (Path, Dist/2, -90);\n"
"    Pit(ppp);\n"
"    ShiftedPath (Path, Dist/2, 90);\n"
"    Pit(reverse ppp);\n"
"enddef;\n"
"\n"
"def thPermanentwater_UIS (expr Path,Rnd) =\n"
"  path ppp;\n"
"  T:=identity;\n"
"  cas := 0;\n"
"  dlzka := arclength Path;\n"
"  mojkrok:=adjust_step(dlzka, 0.5u);\n"
"    pickup PenD;  \n"
"    vardef azim = 50 + 15*normaldeviate enddef;\n"
"    az1 := azim;\n"
"    sgn := 1;\n"
"    ppp := point 0 of Path;\n"
"    forever:\n"
"        t1 := arctime cas of Path;\n"
"        t2 := arctime (cas+mojkrok) of Path;\n"
"        if cas+1.1*mojkrok > dlzka:\n"
"            az2 := 0;\n"
"        else:\n"
"            az2 := azim;\n"
"        fi;\n"
"        d1 := angle(thdir(Path,t1)) + sgn * az1;\n"
"        d2 := angle(thdir(Path,t2)) - sgn * az2;\n"
"        ppp := ppp & (point t1 of Path){dir d1} .. {dir d2}(point t2 of Path);\n"
"        az1 := az2;\n"
"        sgn := -1 * sgn;\n"
"        cas := cas + mojkrok;\n"
"        exitif cas > dlzka + mojkrok/3;     % for rounding errors\n"
"    endfor;\n"
"    drawarrow ppp;\n"
"enddef;\n"
"\n"
"def thIntermittentwater_JSSJ (expr Path,Rnd) =\n"
"  drawoptions(dashed evenly);\n"
"  thPermanentwater_UIS (Path,Rnd);\n"
"  drawoptions();\n"
"enddef;\n"
"\n"
"def thConjecturalwater_SKBB (expr Path,Rnd) =\n"
"  drawoptions(dashed withdots scaled .5 withpen PenB);\n"
"  thPermanentwater_UIS (Path,Rnd);\n"
"  drawoptions();\n"
"enddef;\n"
"\n"
"def thInvisiblePath (expr P) = \n"
"enddef;\n"
"\n"
"def thUndefinedPath (expr P) = \n"
"  T:=identity;\n"
"  pickup PenC;\n"
"  thdraw P withcolor red;\n"
"  message(\"[Warning: undefined line symbol used]\");\n"
"enddef;\n"
"\n"
"def NoJoinPath expr P =\n"
"  T:=identity;\n"
"  pickup PenC;\n"
"  thdraw P withcolor blue;\n"
"enddef;\n"
"\n"
"def NoMorphPath expr P =\n"
"  T:=identity;\n"
"  pickup PenC;\n"
"  thdraw P withcolor blue dashed evenly;\n"
"enddef;\n"
"\n"
"% Q = 0 -- no arrows\n"
"%     1 -- end\n"
"%     2 -- begin\n"
"%     3 -- both\n"
"\n"
"def ArrowPath (expr P, Q) =\n"
"  T:=identity;\n"
"  pickup PenC;\n"
"  thdraw P;\n"
"  p := (-.1u,-.25u)--(0,0)--(.1u,-.25u);\n"
"  if odd Q:\n"
"    draw p rotated (angle(direction 0 of P)+90) shifted (point 0 of P);\n"
"  fi;\n"
"  if Q>1:\n"
"    draw p rotated (angle(direction infinity of P)-90) \n"
"         shifted (point infinity of P);\n"
"  fi;\n"
"enddef;\n"
"\n"
"boolean drawsection;\n"
"\n"
"%% len demo, treba prerobit!\n"
"\n"
"def thSectionPath_SKBB (expr P) =\n"
"  T:=identity;\n"
"  pair zz[];\n"
"  drawsection:=true;\n"
"  pickup PenC;\n"
"  for t = 0 upto length P - 1:\n"
"    zz1 = point t of P;\n"
"    zz2 = point t+1 of P;\n"
"    zz3 = postcontrol t of P;\n"
"    zz4 = precontrol t+1 of P;\n"
"    if length (zz1-zz3) > epsilon:\n"
"      zz5 = whatever[zz1,zz2];\n"
"      (zz3-zz5) dotprod (zz1-zz2) = 0;\n"
"      draw zz1--zz5;\n"
"      drawsection:=false;\n"
"    fi;\n"
"    if length (zz2-zz4) > epsilon:\n"
"      zz6 = whatever[zz1,zz2];\n"
"      (zz4-zz6) dotprod (zz1-zz2) = 0;\n"
"      draw zz2--zz6;\n"
"      drawsection:=false;\n"
"    fi;\n"
"    if drawsection:\n"
"      draw zz1--zz2;\n"
"    fi;\n"
"  endfor;\n"
"enddef;\n"
"\n\n\n%%%%% ENDINPUT thLine %%%%%\n\n\n"
"\n\n\n%%%%% INPUT thText %%%%%\n\n\n"
"%% therion source code\n"
"%%\n"
"%% thText -- therion project file of type metapost symbol library\n"
"%%\n"
"%% This file defines macros for writing labels\n"
"%%\n"
"%% $Date: 2002/07/30 15:10:22 $\n"
"%% $RCSfile: thText.mp,v $\n"
"%% $Revision: 1.3 $\n"
"%%\n"
"%% Copyright (C) 2000 Martin Budaj\n"
"%%\n"
"%% -------------------------------------------------------------------- \n"
"%% This program is free software; you can redistribute it and/or modify\n"
"%% it under the terms of the GNU General Public License as published by\n"
"%% the Free Software Foundation; either version 2 of the License, or\n"
"%% any later version.\n"
"%%\n"
"%% This program is distributed in the hope that it will be useful,\n"
"%% but WITHOUT ANY WARRANTY; without even the implied warranty of\n"
"%% MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n"
"%% GNU General Public License for more details.\n"
"%% \n"
"%% You should have received a copy of the GNU General Public License\n"
"%% along with this program; if not, write to the Free Software\n"
"%% Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n"
"%% --------------------------------------------------------------------\n"
"\n"
"% @LIBRARY\n"
"% thText --\n"
"%\n"
"% This file provides two kinds of high-level macros. In both are\n"
"% labels typeset by MetaPost, not by TeX. This implies some\n"
"% restrictions. Macro for writing texts along a path accepts\n"
"% as text argument only simple string, so you can't use superscripts etc.\n"
"% Second type of macros are for simple -- optionally boxed or circled --\n"
"% labels (used e.g. as passage height symbol). Text argument \n"
"% should be a string containing no spaces and at most 5 characters long.\n"
"% For other types of labels, it's better, when\n"
"% Therion constructs them from more primitive commands. (They are\n"
"% typeset by TeX and in MetaPost's\n"
"% <I>btex ... etex</I> construction cannot be inserted string\n"
"% variable; one tricky solution of this problem in TEX.mp file from \n"
"% standard MetaPost distribution works rather slow.)\n"
"% <P>\n"
"% General syntax for label typesetting (done by TeX) is:\n"
"% <PRE>\n"
"%   lab:=btex ... etex;    \n"
"%   lab:=thelabel.suffix(lab, position);\n"
"%   process_label(position,rot);\n"
"% </PRE>\n"
"%\n"
"% where <I>...</I> means text of your label (you can use all Plain TeX commands\n"
"% in it), <I>lab</I> is predefined\n"
"% picture variable, <I>suffix</I> is one of standard\n"
"% MetaPost's suffixes for label centering, <I>position</I> is\n"
"% pair of coordinates and <I>rot</I> is rotation angle.<BR><BR>\n"
"% Result is always rectangular label.\n"
"\n"
"\n"
"def thFreetext(expr Path,Style,String) =\n"
"  picture pict[];\n"
"  pair zz[];\n"
"  string Font;\n"
"  Font := defaultfont;\n"
"  if Style = 1:      % normal\n"
"    txtScale:=2; \n"
"  elseif Style = 2:  % big\n"
"    txtScale:=3;\n"
"  else:              % small\n"
"    txtScale:=1;\n"
"  fi;\n"
"  l := length (String);\t\t\t\t% No. of characters\n"
"  pict[0] := (String) infont (Font) scaled (txtScale);\n"
"  zz[0] := (lrcorner pict[0]) - (llcorner pict[0]);\n"
"  strl := xpart zz[0];\t\t\t\t% real length \n"
"  pathl := arclength (Path);\n"
"  if strl>pathl:\n"
"    txtScale := (pathl/strl) * txtScale;\n"
"    delta := 0;\n"
"    message(\"[Warning: text scaled down to fit the leading path]\");\n"
"  else:\n"
"    delta := (pathl - strl) / (l - 1);\t\t\t% distance between chars\n"
"  fi;\n"
"  cas := 0;\n"
"  for i=0 upto (l - 1):\n"
"    ch := substring(i,i+1) of (String);\n"
"    pict[0] := ch infont (Font) scaled (txtScale);\n"
"    zz[0] := (lrcorner pict[0]) - (llcorner pict[0]);\t    \n"
"    charwidth := xpart zz[0];\t\t\t% character width\n"
"    if ASCII (ch) <> 32: \n"
"      zz[1] := lrcorner pict[0];\n"
"      addto pict[0] also (strut_string infont Font scaled txtScale);\t% like TeX's $\\backslash$ strut\n"
"      zz[2] := llcorner pict[0];\n"
"      zz[3] := ulcorner pict[0];\n"
"      pict[1] := ch infont Font scaled txtScale;\n"
"      setbounds pict[1] to (zz[2]--(xpart zz[1],ypart zz[2])--\n"
"        (xpart zz[1],ypart zz[3])--zz[3]--cycle);\n"
"      cas := cas + (charwidth / 2);\n"
"      t := arctime cas of (Path);\t\t\t% moving along path\n"
"      lab:=thelabel(pict[1],point t of (Path));\n"
"      process_label(point t of (Path),angle direction t of (Path));\n"
"    else:\n"
"      cas := cas + (charwidth / 2);\n"
"    fi;\n"
"    cas := cas + (charwidth / 2) + delta; \n"
"  endfor;\n"
"enddef;\n"
"\n"
"% text argumen must be encolsed in btex ... etex or \"...\"\n"
"\n"
"vardef thLabel@# (expr txt,pos,rot) =\n"
"  lab:=thelabel@#(txt, pos);\n"
"  process_label(pos,rot);\n"
"enddef;\n"
"\n"
"vardef thSmalllabel@#(expr txt,pos) =\n"
"  begingroup\n"
"    interim defaultscale:=.8;\n"
"    thLabel@#(txt,pos,0);\n"
"  endgroup;\n"
"enddef;\n"
"\n"
"\n"
"vardef thUplabel@# (expr txt, pos) =\n"
"  if length txt <= 5:\n"
"    interim defaultscale:=.8;\n"
"    pickup PenD;\n"
"    lab:=thelabel@#(txt, pos);\n"
"    process_uplabel;\n"
"  fi\n"
"enddef;\n"
"\n"
"\n"
"vardef thDownlabel@# (expr txt, pos) =\n"
"  if length txt <= 5:\n"
"    interim defaultscale:=.8;\n"
"    pickup PenD;\n"
"    lab:=thelabel@#(txt, pos);\n"
"    process_downlabel;\n"
"  fi\n"
"enddef;\n"
"\n"
"% alignment is ignored, now\n"
"\n"
"vardef thUpDownlabel@# (expr num, den, pos) =\n"
"  if (length num <= 5) and (length den <=5):\n"
"    pickup PenD;\n"
"    begingroup interim labeloffset:=2bp;\n"
"      interim defaultscale:=.8;\n"
"      lab:=thelabel.top(num, pos);\n"
"      Lab:=thelabel.bot(den, pos);\n"
"      process_updownlabel;\n"
"    endgroup;\n"
"  fi\n"
"enddef;\n"
"\n"
"\n"
"vardef thCircledlabel@# (expr txt, pos) =\n"
"  if length txt <= 5:\n"
"    begingroup interim bboxmargin := 1bp;\n"
"      interim defaultscale:=.8;\n"
"      pickup PenD;\n"
"      lab:=thelabel@#(txt, pos);\n"
"      process_circledlabel;\n"
"    endgroup;\n"
"  fi\n"
"enddef;\n"
"\n"
"\n"
"vardef thBoxedlabel@# (expr txt, pos) =\n"
"  if length txt <= 5:\n"
"    interim defaultscale:=.8;\n"
"    pickup PenD;\n"
"    lab:=thelabel@#(txt, pos);\n"
"    process_boxedlabel;\n"
"  fi\n"
"enddef;\n"
"\n"
"\n"
"def thASLlabel (expr pprev,pos,pnext,txt) =\n"
"  %rot:=(angle(pprev-pos)+angle(pos-pnext))/2 + 90;\n"
"  rot:=angle(unitvector(pnext-pos)+unitvector(pos-pprev)) - 90;\n"
"  pickup PenD;\n"
"  pair zz;\n"
"  zz:=(pos + 3*unitvector(dir rot));\n"
"  draw (pos)--zz;\n"
"  begingroup \n"
"    interim labeloffset:=2pt;\n"
"    interim defaultscale:=.8;\n"
"    if horiz_labels:\n"
"      rot:=rot mod 360;\n"
"      if rot<=22.5: lab:=thelabel.rt(txt, zz);\n"
"      elseif rot<=67.5: lab:=thelabel.urt(txt, zz);\n"
"      elseif rot<=112.5: lab:=thelabel.top(txt, zz);\n"
"      elseif rot<=157.5: lab:=thelabel.ulft(txt, zz);\n"
"      elseif rot<=202.5: lab:=thelabel.lft(txt, zz);\n"
"      elseif rot<=247.5: lab:=thelabel.llft(txt, zz);\n"
"      elseif rot<=292.5: lab:=thelabel.bot(txt, zz);\n"
"      elseif rot<=337.5: lab:=thelabel.lrt(txt, zz);\n"
"      else: lab:=thelabel.rt(txt, zz);\n"
"      fi;\n"
"    else:\n"
"      if (abs rot>90) and (abs rot <=270):\n"
"        rot:=rot-180;\n"
"        lab:=thelabel.lft(txt, pos);\n"
"      else:\n"
"        lab:=thelabel.rt(txt, pos);\n"
"      fi;\n"
"    fi;\n"
"    process_label(pos, if horiz_labels: 0 else: rot fi);\n"
"  endgroup;\n"
"enddef;\n"
"\n"
"\n"
"vardef thAltitudelabel@#(expr txt,pos) =\n"
"  if length txt <= 10:\n"
"    pickup pencircle scaled (u/6);\n"
"    drawdot(pos);\n"
"    interim defaultscale:=0.8;\n"
"    lab:=thelabel@#(txt, pos);\n"
"    process_label(pos,0);\n"
"  fi\n"
"enddef;\n"
"\n"
"vardef ElevDiff@#(expr txt,pos) =\n"
"  if length txt <= 10:\n"
"    interim defaultscale:=.8;\n"
"    lab:=thelabel@#(txt, pos);\n"
"    process_label(pos,0);\n"
"  fi\n"
"enddef;\n"
"\n"
"vardef ElevDiffPos@#(expr txt,pos) =\n"
"  if length txt <= 10:\n"
"    interim defaultscale:=.8;\n"
"    lab:=thelabel@#(diff_pos&txt, pos);\n"
"    process_label(pos,0);\n"
"  fi\n"
"enddef;\n"
"\n"
"vardef ElevDiffNeg@#(expr txt,pos) =\n"
"  if length txt <= 10:\n"
"    interim defaultscale:=.8;\n"
"    lab:=thelabel@#(diff_neg&txt, pos);\n"
"    process_label(pos,0);\n"
"  fi\n"
"enddef;\n"
"\n"
"\n\n\n%%%%% ENDINPUT thText %%%%%\n\n\n"
"\n\n\n%%%%% INPUT thRandom %%%%%\n\n\n"
"%% therion source code\n"
"%%\n"
"%% thRandom -- therion project file of type metapost symbol library\n"
"%%\n"
"%% This file defines macros for random fills\n"
"%%\n"
"%% $Date: 2002/07/30 15:10:22 $\n"
"%% $RCSfile: thRandom.mp,v $\n"
"%% $Revision: 1.3 $\n"
"%%\n"
"%% Copyright (C) 2000 Martin Budaj\n"
"%%\n"
"%% -------------------------------------------------------------------- \n"
"%% This program is free software; you can redistribute it and/or modify\n"
"%% it under the terms of the GNU General Public License as published by\n"
"%% the Free Software Foundation; either version 2 of the License, or\n"
"%% any later version.\n"
"%%\n"
"%% This program is distributed in the hope that it will be useful,\n"
"%% but WITHOUT ANY WARRANTY; without even the implied warranty of\n"
"%% MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n"
"%% GNU General Public License for more details.\n"
"%% \n"
"%% You should have received a copy of the GNU General Public License\n"
"%% along with this program; if not, write to the Free Software\n"
"%% Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n"
"%% --------------------------------------------------------------------\n"
"\n"
"% @LIBRARY\n"
"% thRandom --\n"
"\n"
"% @SYMBOL\n"
"% thRandomsand_UIS --\n"
"%\n"
"% @PREVIEW\n"
"% \n"
"% thRandomsand_UIS((.5,.5) inscale, 20, 20, 10, 30, 0);\n"
"\n"
"def thRandomsand_UIS (expr center, theta, A, B, Max, rmode) =\n"
"    T:=identity rotated theta shifted center;\n"
"    pickup PenD;\n"
"\t\tthdraw superellipse((A,0),(0,B),(-A,0),(0,-B),.707) \n"
"\t\t       dashed evenly withcolor red;\n"
"%    pair zz;\n"
"%    for i=1 upto Max:\t\t% $\\vert x \\vert < 2$ for 95 \\% of $x$\n"
"%        if rmode = 0:\n"
"%            zz:=(normaldeviate * A/4 ,normaldeviate * B/4)  \n"
"%        else:\n"
"%            zz:=(uniformdeviate A, uniformdeviate B) shifted (-A/2,-B/2)\n"
"%        fi rotated theta;\n"
"%        thdraw zz; \n"
"%    endfor;\t\t            % drawdot consumes a lot of space\n"
"enddef;\n"
"\n"
"% @SYMBOL\n"
"% thRandomdebris_SKBB --\n"
"%\n"
"% @PREVIEW\n"
"% thRandomdebris_SKBB((.5,.5) inscale, 20, 30, 20, 20, 0, 0);\n"
"\n"
"def thRandomdebris_SKBB (expr center, theta, A, B, Max, orient, rmode) =\n"
"    T:=identity shifted center;\n"
"    pickup PenC;\n"
"    pair zz;\n"
"    for i=1 upto Max:\n"
"        if rmode = 0:\n"
"            zz:=(normaldeviate * A/4 ,normaldeviate * B/4)  \n"
"        else:\n"
"            zz:=(uniformdeviate A, uniformdeviate B) shifted (-A/2,-B/2)\n"
"        fi rotated theta;\n"
"        if orient = 0:\n"
"            rot := uniformdeviate(360)\n"
"        elseif orient = 1:\n"
"            rot := angle(zz)\n"
"        else:\n"
"            rot := 0\n"
"        fi;\n"
"        thdraw (zz + (.2u,0) rotated rot) -- (zz - (.2u,0) rotated rot);\n"
"    endfor;\n"
"enddef;\n"
"\n"
"\n\n\n%%%%% ENDINPUT thRandom %%%%%\n\n\n"
"\n\n\n%%%%% INPUT thPatterns %%%%%\n\n\n"
"%% therion source code\n"
"%%\n"
"%% thPatterns -- therion project file of type metapost symbol library\n"
"%%\n"
"%% This file defines macros for pattern fills\n"
"%%\n"
"%% $Date: 2002/07/30 15:10:22 $\n"
"%% $RCSfile: thPatterns.mp,v $\n"
"%% $Revision: 1.3 $\n"
"%%\n"
"%% Copyright (C) 2000 Martin Budaj\n"
"%%\n"
"%% -------------------------------------------------------------------- \n"
"%% This program is free software; you can redistribute it and/or modify\n"
"%% it under the terms of the GNU General Public License as published by\n"
"%% the Free Software Foundation; either version 2 of the License, or\n"
"%% any later version.\n"
"%%\n"
"%% This program is distributed in the hope that it will be useful,\n"
"%% but WITHOUT ANY WARRANTY; without even the implied warranty of\n"
"%% MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n"
"%% GNU General Public License for more details.\n"
"%% \n"
"%% You should have received a copy of the GNU General Public License\n"
"%% along with this program; if not, write to the Free Software\n"
"%% Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n"
"%% --------------------------------------------------------------------\n"
"\n"
"if unknown thLakePattern_UIS: else: endinput fi;\n"
"\n"
"% @LIBRARY\n"
"% thPatterns --\n"
"%\n"
"% This file contains definitions of pattern fills. Use patterns with\n"
"% thfill command instead of fill. Before use, set <T>T:=identity</T>.\n"
"% (In the definition of pattern you are allowed to use MetaPost's\n"
"% draw, fill etc.)\n"
"\n"
"\n"
"% @SYMBOL\n"
"% thLakePattern_UIS --\n"
"%\n"
"% @PREVIEW\n"
"%\n"
"% fill ((.1,.4)..(.6,.2)..(.8,.4)..(.45,.7){dir 160}..cycle) inscale withpattern thLakePattern_UIS;\n"
"\n"
"beginpattern(thLakePattern_UIS);\n"
"    draw origin--10up withpen pensquare scaled (0.02u);\n"
"    patternxstep(.18u);\n"
"    patterntransform(identity rotated 45);\n"
"endpattern;\n"
"\n"
"% @SYMBOL\n"
"% thSumpPattern_UIS --\n"
"%\n"
"% @PREVIEW\n"
"%\n"
"% fill ((.1,.4)..(.6,.2)..(.8,.4)..(.45,.7){dir 160}..cycle) inscale withpattern thSumpPattern_UIS;\n"
"\n"
"beginpattern(thSumpPattern_UIS);\n"
"    draw origin--(0,.25u) withpen pensquare scaled (0.02u);\n"
"    draw origin--(.25u,0) withpen pensquare scaled (0.02u);\n"
"    patterntransform(identity rotated 45);\n"
"endpattern;\n"
"\n"
"% @SYMBOL\n"
"% thSandPattern_UIS --\n"
"%\n"
"% @PREVIEW\n"
"%\n"
"% fill ((.1,.4)..(.6,.2)..(.8,.6)..(.45,.7){dir 130}..cycle) inscale withpattern thSandPattern_UIS;\n"
"\n"
"\n"
"beginpattern(thSandPattern_UIS);\n"
"    pickup PenC;\n"
"    draw (0.2u,.3u);\n"
"    draw (0.35u,.7u);\n"
"    draw (0.6u,.5u);\n"
"    draw (0.8u,.1u);    \n"
"endpattern;\n"
"\n"
"% @SYMBOL\n"
"% thDebrisPattern_SKBB --\n"
"%\n"
"% @PREVIEW\n"
"%\n"
"% fill ((.05,.4)..(.6,.1)..(.9,.6)..(.45,.9){dir 100}..cycle) inscale withpattern thDebrisPattern_SKBB;\n"
"% @ENDSYMBOL\n"
"\n"
"beginpattern(thDebrisPattern_SKBB);\n"
"    pickup PenC;\n"
"    p:=(-.15u,0)--(.15u,0);\n"
"    draw p rotated -40 shifted (.2u,.3u);\n"
"    draw p rotated 70 shifted (.9u,1.5u);\n"
"    draw p rotated 20 shifted (1.5u,.8u);\n"
"%    draw p rotated 95 shifted (.9u,.8u);\n"
"endpattern;\n"
"\n"
"\n\n\n%%%%% ENDINPUT thPatterns %%%%%\n\n\n"
"\n\n\n%%%%% INPUT thArea %%%%%\n\n\n"
"%% therion source code\n"
"%%\n"
"%% thArea -- therion project file of type metapost symbol library\n"
"%%\n"
"%% This file defines macros for plane (filled) figures\n"
"%%\n"
"%% $Date: 2002/07/30 15:10:22 $\n"
"%% $RCSfile: thPlane.mp,v $\n"
"%% $Revision: 1.2 $\n"
"%%\n"
"%% Copyright (C) 2000 Martin Budaj\n"
"%%\n"
"%% -------------------------------------------------------------------- \n"
"%% This program is free software; you can redistribute it and/or modify\n"
"%% it under the terms of the GNU General Public License as published by\n"
"%% the Free Software Foundation; either version 2 of the License, or\n"
"%% any later version.\n"
"%%\n"
"%% This program is distributed in the hope that it will be useful,\n"
"%% but WITHOUT ANY WARRANTY; without even the implied warranty of\n"
"%% MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n"
"%% GNU General Public License for more details.\n"
"%% \n"
"%% You should have received a copy of the GNU General Public License\n"
"%% along with this program; if not, write to the Free Software\n"
"%% Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n"
"%% --------------------------------------------------------------------\n"
"\n"
"% @LIBRARY\n"
"% thPlane --\n"
"%\n"
"% This library contains definitions of plane objects\n"
"\n"
"\n"
"def_transparent_rgb(tr_white, 1, 1, 1);\n"
"def_transparent_rgb(tr_black, 0, 0, 0);\n"
"\n"
"% @SYMBOL\n"
"% thPatternFill --\n"
"%\n"
"% @LEGEND\n"
"% p := ((.1,.4)..(.6,.2)..(.8,.6)..(.45,.7){dir 130}..cycle) inscale;\n"
"% thPatternFill(p, thSandPattern_UIS);\n"
"% @ENDSYMBOL\n"
"% @USE thSandPattern_UIS\n"
"\n"
"def thPatternFill (expr Path, Pattern) =\n"
"  T:=identity;\n"
"  thfill Path withtransparentcolor tr_white;\n"
"  thfill Path withpattern Pattern;\n"
"enddef;\n"
"\n\n\n%%%%% ENDINPUT thArea %%%%%\n\n\n"
"\n\n\n%%%%% INPUT thTrans %%%%%\n\n\n"
"%% translations\n"
"\n"
"let FixedStation = thFixedstation_ASF;\n"
"let PaintedStation = thPaintedstation_SKBB;\n"
"let NaturalStation = thNaturalstation_ASF;              \n"
"let TemporaryStation = thTemporarystation_ASF;\n"
"\n"
"let Stalactite = thStalactite_UIS;\n"
"let Stalagmite = thStalagmite_UIS;\n"
"let Pillar = thPillar_UIS;\n"
"let Curtain = thCurtain_UIS;\n"
"let Helectite = thHelectite_UIS;\n"
"let Sodastraw = thSodaStraw_UIS;\n"
"let Crystal = thCrystal_UIS;\n"
"let Flowstone = thFlowstoneSymbol_UIS;\n"
"let Moonmilk = thMoonmilkSymbol_UIS;\n"
"let Wallcalcite = thWallcalciteSymbol_UIS;\n"
"let Popcorn = thPopcorn_UIS;\n"
"let Disk = thDisk_UIS;\n"
"let Gypsum = thGypsum_CCNP;\n"
"let Aragonite = thAragonite_CCNP;\n"
"let Cavepearl = thCavepearl_JSSJ;\n"
"let Boxwork = thUndefinedSymbol;                      % !\n"
"let Gypsumflower = thGypsumflower_CCNP;\n"
"let Rimstonepool = thRimstonepoolSymbol_ASF;\n"
"let Rimstonedam = thRimstonedamSymbol_ASF;\n"
"let Anostomosen = thAnostomosen_UIS;\n"
"let Karren = thKarren_UIS;\n"
"let Scallop = thScallop_UIS;\n"
"let Flute = thFlute_UIS;\n"
"let Raft = thRaft_CCNP;\n"
"let Raftcone = thRaftcone_CCNP;\n"
"let Spring = thSpring_SKBB;\n"
"let Sink = thSink_SKBB;\n"
"let NarrowEnd = thNarrowend_UIS;\n"
"let LowEnd = thLowend_UIS;\n"
"let FlowstoneChoke = thFlowstonechoke_CCNP;\n"
"let BreakdownChoke = thBreakdownchoke_CCNP;\n"
"let SedimentChoke = thUndefinedSymbol;               % !\n"
"let Bedrock = thBedrock_ASF;\n"
"let Clay = thSandSymbol_UIS;                         % !\n"
"let Sand = thSandSymbol_UIS;\n"
"let Pebbles = thPebblesSymbol_UIS;\n"
"let Debris = thDebrisSymbol_UIS;\n"
"let Blocks = thBlocksSymbol_UIS;\n"
"let Water = thWaterSymbol_UIS;\n"
"let Ice = thIceSymbol_UIS;\n"
"let ArcheoMaterial = thArcheological_UIS;\n"
"let PaleoMaterial = thPaleontological_UIS;\n"
"let Guano = thGuano_UIS;\n"
"let VegetableDebris = thVegetabledebris_ASF;\n"
"let Root = thRoot_ASF;\n"
"let EntranceArrow = thEntrancearrow_UIS;\n"
"let Paleoflow = thPaleoflow_UIS;\n"
"let GradientArrow = thGradientarrow_UIS;\n"
"let PermanentStream = thPermanentstreamarrow_UIS;\n"
"let IntermittentStream = thIntermittentstreamarrow_UIS;\n"
"def Rope(expr pos,r,s,al) = thEquipmentSymbol_SKBB(pos,1) enddef;          \n"
"def FixedLadder(expr pos,r,s,al) = thEquipmentSymbol_SKBB(pos,2) enddef;   \n"
"def RopeLadder(expr pos,r,s,al) = thEquipmentSymbol_SKBB(pos,3) enddef;    \n"
"def Steps(expr pos,r,s,al) = thEquipmentSymbol_SKBB(pos,4) enddef;         \n"
"def Bridge(expr pos,r,s,al) = thEquipmentSymbol_SKBB(pos,5) enddef;        \n"
"def Traverse(expr pos,r,s,al) = thEquipmentSymbol_SKBB(pos,6) enddef;\n"
"def Anchor(expr pos,r,s,al) = thEquipmentSymbol_SKBB(pos,7) enddef;\n"
"def Notequipped(expr pos,r,s,al) = thEquipmentSymbol_SKBB(pos,8) enddef;\n"
"def AirflowArrow(expr pos,r,s,al) = thAirflowarrow_UIS(pos,r,s,3,al) enddef;\n"
"def Sectionarrow(expr pos,r) = thSectionarrow_SKBB(pos,r) enddef; % !\n"
"def Continuation = thContinuation_UIS enddef;\n"
"\n"
"\n"
"def Label = thLabel enddef;\n"
"def Remark = thLabel enddef;\n"
"def Circledlabel = thCircledlabel enddef;\n"
"def Boxedlabel = thBoxedlabel enddef;\n"
"def Passage = thCircledlabel enddef;\n"
"def Passageheight = thUplabel enddef;\n"
"def Waterdepth = thDownlabel enddef;\n"
"def PassageWater = thUpDownlabel enddef;  % zatial bez zarovnania\n"
"def Altitudelabel = thAltitudelabel enddef;\n"
"let Altitude = thASLlabel;\n"
"def Stationlabel = thSmalllabel enddef;\n"
"def Datelabel = thSmalllabel enddef;\n"
"\n"
"let ClayRndFill = thRandomsand_UIS;       % !\n"
"let SandRndFill = thRandomsand_UIS;       \n"
"let PebblesRndFill = thRandomsand_UIS;    % !\n"
"let DebrisRndFill = thRandomsand_UIS;     % !\n"
"let BlocksRndFill = thRandomsand_UIS;     % !\n"
"let FlowstoneRndFill = thRandomsand_UIS;  % !\n"
"let MoonmilkRndFill = thRandomsand_UIS;   % !\n"
"let IceRndFill = thRandomsand_UIS;        % !\n"
"\n"
"let Hyperlink = thUndefinedSymbol;                             % !\n"
"def Customsymbol(expr pos) = thUndefinedSymbol(pos,0,1) enddef;\n"
"\n"
"let Wall = thWall_UIS;\n"
"let Sandwall = thSandwall_SKBB;\n"
"let Claywall = thClaywall_SKBB;\n"
"let Pebbleswall = thPebbleswall_SKBB;\n"
"let Debriswall = thDebriswall_SKBB;\n"
"let Blockswall = thBlockswall_SKBB;\n"
"let Icewall = thIcewall_SKBB;\n"
"let Underlyingwall = thUnderlyingwall_UIS;\n"
"let Unsurveyedwall = thUnsurveyedwall_SKBB;\n"
"let Presumedwall = thPresumedwall_UIS;\n"
"let Invisiblewall = thInvisiblePath;\n"
"\n"
"let FloorStep = thPit_UIS;\n"
"let Pit = thPit_UIS;\n"
"let CeilingStep = thChimney_SKBB;\n"
"let Chimney = thChimney_UIS;\n"
"let Overhang = thOverhang_SKBB;\n"
"let Floorcanyon = thUndefinedPath;\n"
"let Ceilingcanyon = thUndefinedPath;\n"
"\n"
"let Slope = thSlope_SKBB;\n"
"let Contour = thContour_UIS;\n"
"\n"
"let Rockborder = thRockborder_UIS;\n"
"let Rockedge = thRockedge_UIS;\n"
"let Permanentwater = thPermanentwater_UIS;\n"
"let Intermittentwater = thIntermittentwater_JSSJ;\n"
"let Conjencturalwater = thConjecturalwater_SKBB;\n"
"let Visibleborder = thBorder_SKBB;\n"
"let Invisibleborder = thInvisiblePath;\n"
"let Temporaryborder = thTemporaryBorder_SKBB;\n"
"let Rimstonepath = thUndefinedPath;\n"
"let Flowstonepath = thFlowstonepath_UIS;\n"
"let Moonmilkpath = thUndefinedPath;\n"
"let Fixedladderpath = thUndefinedPath;\n"
"let Ropeladderpath = thUndefinedPath;\n"
"let Bridgepath = thUndefinedPath;\n"
"let Fixedline = thUndefinedPath;\n"
"let Handrail = thUndefinedPath;\n"
"let Fence = thUndefinedPath;\n"
"let Concretewall = thUndefinedPath;\n"
"let Door = thUndefinedPath;\n"
"let Gate = thUndefinedPath;\n"
"let Formedpath = thUndefinedPath;\n"
"let Stepspath = thUndefinedPath;\n"
"let Bridgepath = thUndefinedPath;\n"
"let Sectionline = thBorder_SKBB;\n"
"\n"
"let Freetext = thFreetext;\n"
"let Custompath = thUndefinedPath;\n"
"\n"
"let Polygon = thPolygon_SKBB;\n"
"\n"
"let PatternFill = thPatternFill;\n"
"\n"
"def Waterpattern = scantokens(\"thLakePattern_UIS\") enddef;\n"
"def Sumppattern = scantokens(\"thSumpPattern_UIS\") enddef;\n"
"def Claypattern = scantokens(\"thSandPattern_UIS\") enddef;\n"
"def Sandpattern = scantokens(\"thSandPattern_UIS\") enddef;\n"
"def Pebblespattern = scantokens(\"thDebrisPattern_SKBB\") enddef;\n"
"def Debrispattern = scantokens(\"thDebrisPattern_SKBB\") enddef;\n"
"def Blockspattern = scantokens(\"thDebrisPattern_SKBB\") enddef;\n"
"def Flowstonepattern = scantokens(\"thLakePattern_UIS\") enddef;\n"
"def Moonmilkpattern = scantokens(\"thLakePattern_UIS\") enddef;\n"
"def Icepattern = scantokens(\"thLakePattern_UIS\") enddef;\n"
"\n\n\n%%%%% ENDINPUT thTrans %%%%%\n\n\n"
"\n\n\n%%%%% INPUT thTmp %%%%%\n\n\n"
"defaultfont:=\"csss10\";\n"
"\n"
"lang:=\"sk\";\n"
"horiz_labels:=true;\n"
"\n"
"diff_pos:=\"+\";\n"
"diff_neg:=\"-\";\n"
"\n\n\n%%%%% ENDINPUT thTmp %%%%%\n\n\n"
"\n"
"nonstopmode;\n";
 

#endif
