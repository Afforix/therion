#!/usr/bin/perl
$outscale = 250;

$scale = 2834.645669 / $outscale;

print "This is therion MetaPost exporter.\n";

open POINTS, 'th__data.pos';
while ($line = <POINTS>) {
      if ($line =~ /^\s*\(\s+(\S+),\s*(\S+),\s+(\S+)\s+\)\s+\\(\S+)$/) {
         my ($x, $y, $z, $name) = ($1, $2, $3, $4);
         $name =~ s/\.([0-9]+)$/\@\1/;
         $spoint{$name} = [$x, $y, $z];
      };
};
close POINTS;

foreach $point (keys %spoint) {
        my ($x, $y, $z) = @{$spoint{$point}};
        unless (defined @bbox) {@bbox = ($x, $x, $y, $y)};
        if ($x < $bbox[0]) {$bbox[0] = $x};
        if ($x > $bbox[1]) {$bbox[1] = $x};
        if ($y < $bbox[2]) {$bbox[2] = $y};
        if ($y > $bbox[3]) {$bbox[3] = $y};
};

$shift_x = .5 * ($bbox[1] + $bbox[0]);
$shift_y = .5 * ($bbox[2] + $bbox[3]);

foreach $point (keys %spoint) {
        my ($x, $y, $z) = @{$spoint{$point}};
        $spoint{$point} = [$x - $shift_x, $y - $shift_y, $z];
};

sub get_point {
    my @params = split ';',shift;
    $params[6] =~ /^"(.*)"$/;
    my $pname = $1;
    if ($params[2] eq '-') { return $bpoint{$pname}};

    $block[$cblock][1] += $spoint{$params[0]}[2] + $spoint{$params[1]}[2];
    $block[$cblock][2] += 2;

    my ($fx, $tx, $fy, $ty) = ($spoint{$params[0]}[0], $spoint{$params[1]}[0],
                               $spoint{$params[0]}[1], $spoint{$params[1]}[1]);
    my ($vx, $vy) = ( $tx - $fx, $ty - $fy);
    my $snorm = sqrt ($vx ** 2 + $vy ** 2);
    my ($rx, $ry) = (0, 0);

    $params[2] =~ /^(.*)([pm]+)$/;
    if ($2 eq 'p') {($rx, $ry) = ($fx + .01 * $1 * $vx, $fy + .01 * $1 * $vy)}
    else {($rx, $ry) = ($fx+1.0*$1/$snorm * $vx, $fy+1.0*$1/$snorm * $vy)};

    if ($params[4] eq '-') {
       ($vx, $vy) = (1.0 / $snorm * $vy, -1.0 / $snorm * $vx);
    } else {
       ($vx, $vy) = (sin($params[4]/180*3.14159), cos($params[4]/180*3.14159));
       unless ($params[5] eq '-') {$params[3] *= cos($params[5]/180*3.14159)};
    };

    ($rx, $ry) = ($rx + $params[3] * $vx, $ry + $params[3] * $vy);
    ($rx, $ry) = ($rx * $scale, $ry * $scale);
    my $vysl = sprintf "(%.2f, %.2f)", $rx, $ry;
    if (length($pname) > 0) {$bpoint{$pname} = $vysl};
    return $vysl;
};

sub get_line {
    my @params = split /\s+/,shift;
    $params[0] =~ /^"(.*)"$/;
    my $lname = $1; shift @params;
    my $lcycle = shift @params;
    $blinen++;
    if (length($lname) > 0) {$blines{$lname} = $blinen};
    my $parc = 0;
    my $outp = '';
    while ($parc < @params) {
    my @ppp = split ';',$params[$parc];
    unless ($ppp[7] eq '-') {$ppp[7] = 90 - $ppp[7]; $outp .= "{dir $ppp[7]}"};
    $outp .= get_point($params[$parc]) . "\n";
    unless ($ppp[8] eq '-') {$ppp[8] = 90 - $ppp[8]; $outp .= "{dir $ppp[8]}"};
    if ((($parc + 1) < @params) || ($lcycle)) {$outp .= $ppp[9]};
    } continue {$parc++};
    if ($lcycle) {$outp .= ' cycle'};
    $block[$cblock][3] .= $blinen . " = " . $outp . ";\n";
    return $blinen;
};


sub export_stone {
    my @params = split /\s+/, shift;
    unless ($params[1]) {$params[1] = '1'};
    unless ($params[2]) {$params[2] = '0'};
    unless ($params[3]) {$params[3] = $params[1]};
    $crd = get_point($params[0]);
    @params = ($crd, $params[1] * $scale, $params[3] * $scale, 90 - $params[2]);
    my $prm = join ', ', @params;
    if ($crd) {$block[$cblock][5] .= "\tStochasticRock($prm);\n"};
};

sub export_sand {
    my @params = split /\s+/, shift;
    unless ($params[1]) {$params[1] = '1'};
    unless ($params[2]) {$params[2] = '0'};
    unless ($params[3]) {$params[3] = $params[1]};
    unless ($params[4]) {$params[4] = int (10 * $params[1] ** 1.5)};
    $crd = get_point($params[0]);
    @params = ($crd, $params[1] * $scale, $params[3] * $scale, $params[2], $params[4]);
    my $prm = join ', ', @params;
    if ($crd) {$block[$cblock][5] .= "\tStochasticSand($prm);\n"};
};

sub export_wall {
    my $wpath = get_line shift;
    $block[$cblock][0] .= "\tOutline($wpath);\n";
    if ($block[$cblock][4]) {$block[$cblock][4] .= " -- $wpath"}
    else {$block[$cblock][4] .= $wpath};
};

sub export_pit {
    my $ppath = get_line shift;
    $block[$cblock][5] .= "\tPit($ppath);\n";
};

sub export_border {
    my $bpath = get_line shift;
    $block[$cblock][5] .= "\tBorder($bpath);\n";
};

sub export_lake {
    my @pts = split /\s+/, shift;
    my $pn = 0;
    while ($pn < @pts) {
          $pts[$pn] = $blines{$pts[$pn]};
          $pn++;
    };
    $blinen++;
    my $paths = join ', ', @pts;
    $block[$cblock][3] .= "$blinen = buildcycle ($paths);\n";
    $block[$cblock][5] = "\tFill($blinen, LakePattern);\n" . $block[$cblock][5];
};


sub export_polygon {
    my $xpath = get_line shift;
    $block[$cblock][0] .= "\tPolygon($xpath);\n";
};

sub export_label {
    my @pars = split /\s+/, shift;
    my $pnt = get_point shift @pars;
    my $azi = shift @pars;
    unless ($azi) {$azi = 0};
    $azi = -$azi + 90;
    my $alg = (shift @pars) || 'rt';
    my $txt = join ' ', @pars;
    $block[$cblock][0] .= "\tlabel.$alg\(btex $txt etex rotated $azi, $pnt);\n";
};

sub export_title {
    my @pars = split /\s+\:\s+/, shift;
    my $path = get_line shift @pars;
    my $text = join ' : ', @pars;
    $block[$cblock][0] .= "\tFreetext(\"$text\", $path, \"csr10\", 1.8);\n";
};


sub transform_specargs {
    my $tocmd = shift;
    my @ppar = split /\s+/, shift;
    my $cmdname = '';
    if ($tocmd) {
	$cmdname = shift @ppar;
    };
    my $args = '';
    foreach my $param (@ppar) {
        if ($param =~ /^\#d\#(\S+)/) {
	    $param = $1 * $scale;
	}
	elsif ($param =~ /^\&p\&(\S+)/) {
	    $param = $blines{$1};
	};
	$args .= "$param ";
    };
    return ($cmdname, $args);
};

sub export_specialpath {
    my @pars = split /\s+\:\s+/, shift;
    my $path = get_line shift @pars;
    my $text = join ' : ', @pars;
    my ($cmdname, $args) = &transform_specargs(1, $text);
    my $wh = 0;
    if ($cmdname =~ /\@(\S+)/) {
        $wh = 5;
	$cmdname = $1;
    };
    $block[$cblock][$wh] .= "\t$cmdname($path$args);\n";
};

sub export_specialpoint {
    my @pars = split /\s+/, shift;
    my $pnt = get_point shift @pars;
    my $txt = join ' ', @pars;
    my ($cmdname, $args) = &transform_specargs(1, $txt);
    my $wh = 0;
    if ($cmdname =~ /\@(\S+)/) {
        $wh = 5;
	$cmdname = $1;
    };
    $block[$cblock][$wh] .= "\t$cmdname($pnt$args);\n";
};

sub export_special {
    my $txt = shift;
    my ($cmdname, $args) = &transform_specargs(0, $txt);
    my $wh = 0;
    if ($args =~ /^\s*\@(.*)/) {
        $wh = 5;
	$args = $1;
    };
    $block[$cblock][$wh] .= "\t$args\n";
};



open EXPFILE, 'th__data.exp';
$cblock = -1;

LINE:
while ($line = <EXPFILE>) {
      if ($line =~ /^map\:\:/) {
         $cblock++;
         $block[$cblock] = [ '', 0, 0, '', '', ''];
         %bpoints = ();
         %blines = ();
         $blinen = 'p000';
         next LINE;
      };
      if ($line =~ /^\*(\w+)\s+(.*)$/) {
      my ($command, $parameter) = ($1, $2);
      if ($command eq 'stone') {export_stone $parameter};
      if ($command eq 'sand') {export_sand $parameter};
      if ($command eq 'wall') {export_wall $parameter};
      if ($command eq 'pit') {export_pit $parameter};   
      if ($command eq 'border') {export_border $parameter};   
      if ($command eq 'lake') {export_lake $parameter};   
      if ($command eq 'polygon') {export_polygon $parameter};
      if ($command eq 'label') {export_label $parameter};
      if ($command eq 'title') {export_title $parameter};
      if ($command eq 'specialpath') {export_specialpath $parameter};   
      if ($command eq 'specialpoint') {export_specialpoint $parameter};   
      if ($command eq 'special') {export_special $parameter};   
      };
};
close EXPFILE;

open MPFILE, '>th__data.mp';
print MPFILE "Scale = $outscale;\n";
print MPFILE <<EOT;
prologues:=1;
input therion.mp;
defaultfont := "csr10";
defaultscale:= 1.8;
def ... = .. tension 1.5 .. enddef;
EOT

for $bn (0 .. $cblock) {
    $bnn = $bn + 1;
    print MPFILE "\n\nbeginfig($bnn);\npath p[];\n";
    print MPFILE "\n$block[$bn][3]";
    print MPFILE "\nClean($block[$bn][4] -- cycle);\n";
    print MPFILE "\n$block[$bn][5]";
    print MPFILE "\nclip currentpicture to ($block[$bn][4] -- cycle);\n";
    print MPFILE "\n$block[$bn][0]";
    print MPFILE "endfig;\n";
    };
print MPFILE "\nend;";    
close MPFILE;



